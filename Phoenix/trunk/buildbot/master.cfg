# -*- python -*-
# ex: set syntax=python:
#-------------------------------------------------------------------------------
# This is the buildmaster config file for the wxPython Phoenix Buildbot,
# located at http://buildbot.wxpython.org:8010/. This file is located here in
# order to allow it to be versioned and backed up. However it is NOT
# automatically copied into the buildmaster's working folder, that must be
# done by hand after reviewing changes made here. It must be installed as
# 'master.cfg' in the buildmaster's base directory.
#-------------------------------------------------------------------------------

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element
# is a BuildSlave object, specifying a unique slave name and password. The
# same slave name and password must be configured on the slave.

# Passwords are stored separately and not maintained in the souce repository
# for security's sake
import bbpasswd

from buildbot.buildslave import BuildSlave
c['slaves'] = [ BuildSlave("osx_cocoa-py27", bbpasswd.PASSWD1),    # Kevin Ollivier
                BuildSlave("win7-py27", bbpasswd.PASSWD1),         # Robin Dunn
                BuildSlave("ubuntu-py27", bbpasswd.PASSWD1),       # Robin Dunn
                ]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. 

from buildbot.changes.svnpoller import SVNPoller

wxsvn = SVNPoller('http://svn.wxwidgets.org/svn/wx/wxWidgets/trunk',
                  pollinterval=300,
                  histmax=20,
                  cachepath='/home/wxpybb/buildbot/last_change.wx.cache')
        
phoenixsvn = SVNPoller('http://svn.wxwidgets.org/svn/wx/wxPython/Phoenix/trunk',
                       pollinterval=300,
                       histmax=20,
                       cachepath='/home/wxpybb/buildbot/last_change.Phoenix.cache')

c['change_source'] = [wxsvn, phoenixsvn]



####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.timed import Nightly
from buildbot.changes import filter

c['schedulers'] = []
c['schedulers'].append( SingleBranchScheduler(
                            name="sched-build",
                            branch=None,
                            treeStableTimer=30,
                            builderNames=["build-win32-py27",
                                          "build-osx-py27",
                                          "build-gtk-py27"]))

c['schedulers'].append( Nightly(
                            name="sched-dist",
                            branch=None,
                            hour=3, minute=0,
                            builderNames=["dist-win32-py27",
                                          "dist-osx-py27"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import SVN
from buildbot.steps.shell import ShellCommand
from buildbot.config import BuilderConfig


def makeFactory(port, buildType='buildOnly'):
    # all of them need to fetch the source
    factory = BuildFactory()
    factory.addStep(SVN(svnurl='http://svn.wxwidgets.org/svn/wx/wxWidgets/trunk',
                        workdir="wxWidgets", mode='copy'))
    factory.addStep(SVN(svnurl='http://svn.wxwidgets.org/svn/wx/wxPython/Phoenix/trunk',
                        workdir="Phoenix", mode='copy'))

    cmd = 'python build.py dox touch etg --nodoc sip build'
    if port == 'osx':
        cmd += ' --mac_arch=i386,x86_64'
    if buildType == 'dist':
        cmd += ' bdist --upload_package'
        
    factory.addStep(ShellCommand(command=cmd.split(), workdir="Phoenix"))
    return factory



c['builders'] = [
                  BuilderConfig(name="build-osx-py27",
                                slavenames=["osx_cocoa-py27"],
                                factory=makeFactory('osx')),

                  BuilderConfig(name="dist-osx-py27",
                                slavenames=["osx_cocoa-py27"],
                                factory=makeFactory('osx', 'dist')),
                                
                  BuilderConfig(name="build-win32-py27",
                                slavenames=["win7-py27"],
                                factory=makeFactory('win32')),

                  BuilderConfig(name="dist-win32-py27",
                                slavenames=["win7-py27"],
                                factory=makeFactory('win32', 'dist')),
      
                  BuilderConfig(name="build-gtk-py27",
                                slavenames=["ubuntu-py27"],
                                factory=makeFactory('gtk')),
                  ]



####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

# email notification

from buildbot.status.mail import MailNotifier
mn = MailNotifier(fromaddr="buildbot@riobu.com",
                       sendToInterestedUsers=False,
                       mode='problem',
                       extraRecipients=['kevino@theolliviers.com', 'robin@alldunn.com'])

c['status'].append(mn)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "wxPython Phoenix"
c['titleURL'] = "http://wxpython.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://buildbot.wxpython.org:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

