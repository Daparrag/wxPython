/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.12-snapshot-93040d2c716c
 *
 *     Copyright: (c) 2010 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

#line 1017 "sip/gen/event.sip"
    #include <wx/event.h>
#line 15 "sip_corewxNotifyEvent.cpp"

#line 40 "sip/gen/object.sip"
    #include <wx/object.h>
#line 19 "sip_corewxNotifyEvent.cpp"
#line 129 "sip/gen/event.sip"
    #include <wx/event.h>
#line 22 "sip_corewxNotifyEvent.cpp"
#line 17 "sip/gen/object.sip"
    #include <wx/object.h>
#line 25 "sip_corewxNotifyEvent.cpp"
#line 84 "sip/gen/object.sip"
    #include <wx/object.h>
#line 28 "sip_corewxNotifyEvent.cpp"


class sipwxNotifyEvent : public wxNotifyEvent
{
public:
    sipwxNotifyEvent(wxEventType,int);
    sipwxNotifyEvent(const wxNotifyEvent&);
    virtual ~sipwxNotifyEvent();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    wxEvent * Clone();
    wxEventCategory GetEventCategory();
    wxClassInfo * GetClassInfo();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxNotifyEvent(const sipwxNotifyEvent &);
    sipwxNotifyEvent &operator = (const sipwxNotifyEvent &);

    char sipPyMethods[3];
};

sipwxNotifyEvent::sipwxNotifyEvent(wxEventType eventType,int id): wxNotifyEvent(eventType,id), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxNotifyEvent::sipwxNotifyEvent(const wxNotifyEvent& a0): wxNotifyEvent(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxNotifyEvent::~sipwxNotifyEvent()
{
    sipCommonDtor(sipPySelf);
}

wxEvent * sipwxNotifyEvent::Clone()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_Clone);

    if (!sipMeth)
        return wxEvent::Clone();

    extern wxEvent * sipVH__core_1(sip_gilstate_t,PyObject *);

    return sipVH__core_1(sipGILState,sipMeth);
}

wxEventCategory sipwxNotifyEvent::GetEventCategory()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_GetEventCategory);

    if (!sipMeth)
        return wxEvent::GetEventCategory();

    extern wxEventCategory sipVH__core_0(sip_gilstate_t,PyObject *);

    return sipVH__core_0(sipGILState,sipMeth);
}

wxClassInfo * sipwxNotifyEvent::GetClassInfo()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_GetClassInfo);

    if (!sipMeth)
        return wxObject::GetClassInfo();

    extern wxClassInfo * sipVH__core_6(sip_gilstate_t,PyObject *);

    return sipVH__core_6(sipGILState,sipMeth);
}


PyDoc_STRVAR(doc_wxNotifyEvent_Allow, "NotifyEvent.Allow()");

extern "C" {static PyObject *meth_wxNotifyEvent_Allow(PyObject *, PyObject *);}
static PyObject *meth_wxNotifyEvent_Allow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxNotifyEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxNotifyEvent, &sipCpp))
        {
            try
            {
            sipCpp->Allow();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NotifyEvent, sipName_Allow, doc_wxNotifyEvent_Allow);

    return NULL;
}


PyDoc_STRVAR(doc_wxNotifyEvent_IsAllowed, "NotifyEvent.IsAllowed() -> bool");

extern "C" {static PyObject *meth_wxNotifyEvent_IsAllowed(PyObject *, PyObject *);}
static PyObject *meth_wxNotifyEvent_IsAllowed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxNotifyEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxNotifyEvent, &sipCpp))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->IsAllowed();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NotifyEvent, sipName_IsAllowed, doc_wxNotifyEvent_IsAllowed);

    return NULL;
}


PyDoc_STRVAR(doc_wxNotifyEvent_Veto, "NotifyEvent.Veto()");

extern "C" {static PyObject *meth_wxNotifyEvent_Veto(PyObject *, PyObject *);}
static PyObject *meth_wxNotifyEvent_Veto(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxNotifyEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxNotifyEvent, &sipCpp))
        {
            try
            {
            sipCpp->Veto();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NotifyEvent, sipName_Veto, doc_wxNotifyEvent_Veto);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_wxNotifyEvent(void *, const sipTypeDef *);}
static void *cast_wxNotifyEvent(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_wxNotifyEvent)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_wxCommandEvent)->ctd_cast((wxCommandEvent *)(wxNotifyEvent *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxNotifyEvent(void *, int);}
static void release_wxNotifyEvent(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxNotifyEvent *>(sipCppV);
    else
        delete reinterpret_cast<wxNotifyEvent *>(sipCppV);
}


extern "C" {static void dealloc_wxNotifyEvent(sipSimpleWrapper *);}
static void dealloc_wxNotifyEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipwxNotifyEvent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_wxNotifyEvent(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_wxNotifyEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_wxNotifyEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxNotifyEvent *sipCpp = 0;

    {
        wxEventType eventType = wxEVT_NULL;
        int id = 0;

        static const char *sipKwdList[] = {
            sipName_eventType,
            sipName_id,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|ii", &eventType, &id))
        {
            try
            {
            sipCpp = new sipwxNotifyEvent(eventType,id);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const wxNotifyEvent * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxNotifyEvent, &a0))
        {
            try
            {
            sipCpp = new sipwxNotifyEvent(*a0);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxNotifyEvent[] = {{9, 255, 1}};


static PyMethodDef methods_wxNotifyEvent[] = {
    {SIP_MLNAME_CAST(sipName_Allow), meth_wxNotifyEvent_Allow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxNotifyEvent_Allow)},
    {SIP_MLNAME_CAST(sipName_IsAllowed), meth_wxNotifyEvent_IsAllowed, METH_VARARGS, SIP_MLDOC_CAST(doc_wxNotifyEvent_IsAllowed)},
    {SIP_MLNAME_CAST(sipName_Veto), meth_wxNotifyEvent_Veto, METH_VARARGS, SIP_MLDOC_CAST(doc_wxNotifyEvent_Veto)}
};

PyDoc_STRVAR(doc_wxNotifyEvent, "\1NotifyEvent(int eventType=wxEVT_NULL, int id=0)\n"
    "NotifyEvent(NotifyEvent)");


sipClassTypeDef sipTypeDef__core_wxNotifyEvent = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_wxNotifyEvent,
        {0}
    },
    {
        sipNameNr_NotifyEvent,
        {0, 0, 1},
        3, methods_wxNotifyEvent,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxNotifyEvent,
    -1,
    -1,
    supers_wxNotifyEvent,
    0,
    init_wxNotifyEvent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxNotifyEvent,
    0,
    0,
    0,
    release_wxNotifyEvent,
    cast_wxNotifyEvent,
    0,
    0,
    0
};
