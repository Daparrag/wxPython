/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.12-snapshot-93040d2c716c
 *
 *     Copyright: (c) 2010 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

#line 386 "sip/gen/gdicmn.sip"
    #include <wx/gdicmn.h>
#line 15 "sip_corewxRect.cpp"

#line 23 "sip/gen/gdicmn.sip"
    #include <wx/gdicmn.h>
#line 19 "sip_corewxRect.cpp"
#line 177 "sip/gen/gdicmn.sip"
    #include <wx/gdicmn.h>
#line 22 "sip_corewxRect.cpp"


PyDoc_STRVAR(doc_wxRect_CentreIn, "Rect.CentreIn(Rect, int dir=wxBOTH) -> Rect");

extern "C" {static PyObject *meth_wxRect_CentreIn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect_CentreIn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxRect * r;
        int rState = 0;
        int dir = wxBOTH;
        wxRect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_r,
            sipName_dir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_wxRect, &sipCpp, sipType_wxRect, &r, &rState, &dir))
        {
            wxRect *sipRes;

            try
            {
            sipRes = new wxRect(sipCpp->CentreIn(*r,dir));
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect *>(r),sipType_wxRect,rState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect *>(r),sipType_wxRect,rState);

            return sipConvertFromNewType(sipRes,sipType_wxRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_CentreIn, doc_wxRect_CentreIn);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_CenterIn, "Rect.CenterIn(Rect, int dir=wxBOTH) -> Rect");

extern "C" {static PyObject *meth_wxRect_CenterIn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect_CenterIn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxRect * r;
        int rState = 0;
        int dir = wxBOTH;
        wxRect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_r,
            sipName_dir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_wxRect, &sipCpp, sipType_wxRect, &r, &rState, &dir))
        {
            wxRect *sipRes;

            try
            {
            sipRes = new wxRect(sipCpp->CenterIn(*r,dir));
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect *>(r),sipType_wxRect,rState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect *>(r),sipType_wxRect,rState);

            return sipConvertFromNewType(sipRes,sipType_wxRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_CenterIn, doc_wxRect_CenterIn);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_Deflate, "Rect.Deflate(int, int) -> Rect\n"
    "Rect.Deflate(Size) -> Rect\n"
    "Rect.Deflate(int) -> Rect");

extern "C" {static PyObject *meth_wxRect_Deflate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect_Deflate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        wxCoord dx;
        wxCoord dy;
        wxRect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dx,
            sipName_dy,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii", &sipSelf, sipType_wxRect, &sipCpp, &dx, &dy))
        {
            wxRect *sipRes;

            try
            {
            sipRes = &sipCpp->Deflate(dx,dy);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromType(sipRes,sipType_wxRect,NULL);
        }
    }

    {
        const wxSize * diff;
        int diffState = 0;
        wxRect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_diff,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect, &sipCpp, sipType_wxSize, &diff, &diffState))
        {
            wxRect *sipRes;

            try
            {
            sipRes = &sipCpp->Deflate(*diff);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxSize *>(diff),sipType_wxSize,diffState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxSize *>(diff),sipType_wxSize,diffState);

            return sipConvertFromType(sipRes,sipType_wxRect,NULL);
        }
    }

    {
        wxCoord diff;
        wxRect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_diff,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxRect, &sipCpp, &diff))
        {
            wxRect *sipRes;

            try
            {
            sipRes = &sipCpp->Deflate(diff);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromType(sipRes,sipType_wxRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_Deflate, doc_wxRect_Deflate);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_Inflate, "Rect.Inflate(int, int) -> Rect\n"
    "Rect.Inflate(Size) -> Rect\n"
    "Rect.Inflate(int) -> Rect");

extern "C" {static PyObject *meth_wxRect_Inflate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect_Inflate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        wxCoord dx;
        wxCoord dy;
        wxRect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dx,
            sipName_dy,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii", &sipSelf, sipType_wxRect, &sipCpp, &dx, &dy))
        {
            wxRect *sipRes;

            try
            {
            sipRes = &sipCpp->Inflate(dx,dy);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromType(sipRes,sipType_wxRect,NULL);
        }
    }

    {
        const wxSize * diff;
        int diffState = 0;
        wxRect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_diff,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect, &sipCpp, sipType_wxSize, &diff, &diffState))
        {
            wxRect *sipRes;

            try
            {
            sipRes = &sipCpp->Inflate(*diff);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxSize *>(diff),sipType_wxSize,diffState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxSize *>(diff),sipType_wxSize,diffState);

            return sipConvertFromType(sipRes,sipType_wxRect,NULL);
        }
    }

    {
        wxCoord diff;
        wxRect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_diff,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxRect, &sipCpp, &diff))
        {
            wxRect *sipRes;

            try
            {
            sipRes = &sipCpp->Inflate(diff);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromType(sipRes,sipType_wxRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_Inflate, doc_wxRect_Inflate);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_Offset, "Rect.Offset(int, int)\n"
    "Rect.Offset(Point)");

extern "C" {static PyObject *meth_wxRect_Offset(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect_Offset(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        wxCoord dx;
        wxCoord dy;
        wxRect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dx,
            sipName_dy,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii", &sipSelf, sipType_wxRect, &sipCpp, &dx, &dy))
        {
            try
            {
            sipCpp->Offset(dx,dy);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const wxPoint * pt;
        int ptState = 0;
        wxRect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect, &sipCpp, sipType_wxPoint, &pt, &ptState))
        {
            try
            {
            sipCpp->Offset(*pt);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint *>(pt),sipType_wxPoint,ptState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint *>(pt),sipType_wxPoint,ptState);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_Offset, doc_wxRect_Offset);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_Union, "Rect.Union(Rect) -> Rect");

extern "C" {static PyObject *meth_wxRect_Union(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect_Union(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxRect * rect;
        int rectState = 0;
        wxRect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect, &sipCpp, sipType_wxRect, &rect, &rectState))
        {
            wxRect *sipRes;

            try
            {
            sipRes = &sipCpp->Union(*rect);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect *>(rect),sipType_wxRect,rectState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect *>(rect),sipType_wxRect,rectState);

            return sipConvertFromType(sipRes,sipType_wxRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_Union, doc_wxRect_Union);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_Contains, "Rect.Contains(int, int) -> bool\n"
    "Rect.Contains(Point) -> bool\n"
    "Rect.Contains(Rect) -> bool");

extern "C" {static PyObject *meth_wxRect_Contains(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect_Contains(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int x;
        int y;
        wxRect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii", &sipSelf, sipType_wxRect, &sipCpp, &x, &y))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->Contains(x,y);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const wxPoint * pt;
        int ptState = 0;
        wxRect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect, &sipCpp, sipType_wxPoint, &pt, &ptState))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->Contains(*pt);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint *>(pt),sipType_wxPoint,ptState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint *>(pt),sipType_wxPoint,ptState);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const wxRect * rect;
        int rectState = 0;
        wxRect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect, &sipCpp, sipType_wxRect, &rect, &rectState))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->Contains(*rect);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect *>(rect),sipType_wxRect,rectState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect *>(rect),sipType_wxRect,rectState);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_Contains, doc_wxRect_Contains);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_GetBottom, "Rect.GetBottom() -> int");

extern "C" {static PyObject *meth_wxRect_GetBottom(PyObject *, PyObject *);}
static PyObject *meth_wxRect_GetBottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect, &sipCpp))
        {
            int sipRes;

            try
            {
            sipRes = sipCpp->GetBottom();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_GetBottom, doc_wxRect_GetBottom);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_GetBottomLeft, "Rect.GetBottomLeft() -> Point");

extern "C" {static PyObject *meth_wxRect_GetBottomLeft(PyObject *, PyObject *);}
static PyObject *meth_wxRect_GetBottomLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect, &sipCpp))
        {
            wxPoint *sipRes;

            try
            {
            sipRes = new wxPoint(sipCpp->GetBottomLeft());
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_GetBottomLeft, doc_wxRect_GetBottomLeft);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_GetBottomRight, "Rect.GetBottomRight() -> Point");

extern "C" {static PyObject *meth_wxRect_GetBottomRight(PyObject *, PyObject *);}
static PyObject *meth_wxRect_GetBottomRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect, &sipCpp))
        {
            wxPoint *sipRes;

            try
            {
            sipRes = new wxPoint(sipCpp->GetBottomRight());
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_GetBottomRight, doc_wxRect_GetBottomRight);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_GetHeight, "Rect.GetHeight() -> int");

extern "C" {static PyObject *meth_wxRect_GetHeight(PyObject *, PyObject *);}
static PyObject *meth_wxRect_GetHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect, &sipCpp))
        {
            int sipRes;

            try
            {
            sipRes = sipCpp->GetHeight();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_GetHeight, doc_wxRect_GetHeight);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_GetLeft, "Rect.GetLeft() -> int");

extern "C" {static PyObject *meth_wxRect_GetLeft(PyObject *, PyObject *);}
static PyObject *meth_wxRect_GetLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect, &sipCpp))
        {
            int sipRes;

            try
            {
            sipRes = sipCpp->GetLeft();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_GetLeft, doc_wxRect_GetLeft);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_GetPosition, "Rect.GetPosition() -> Point");

extern "C" {static PyObject *meth_wxRect_GetPosition(PyObject *, PyObject *);}
static PyObject *meth_wxRect_GetPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect, &sipCpp))
        {
            wxPoint *sipRes;

            try
            {
            sipRes = new wxPoint(sipCpp->GetPosition());
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_GetPosition, doc_wxRect_GetPosition);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_GetRight, "Rect.GetRight() -> int");

extern "C" {static PyObject *meth_wxRect_GetRight(PyObject *, PyObject *);}
static PyObject *meth_wxRect_GetRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect, &sipCpp))
        {
            int sipRes;

            try
            {
            sipRes = sipCpp->GetRight();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_GetRight, doc_wxRect_GetRight);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_GetSize, "Rect.GetSize() -> Size");

extern "C" {static PyObject *meth_wxRect_GetSize(PyObject *, PyObject *);}
static PyObject *meth_wxRect_GetSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect, &sipCpp))
        {
            wxSize *sipRes;

            try
            {
            sipRes = new wxSize(sipCpp->GetSize());
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_GetSize, doc_wxRect_GetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_GetTop, "Rect.GetTop() -> int");

extern "C" {static PyObject *meth_wxRect_GetTop(PyObject *, PyObject *);}
static PyObject *meth_wxRect_GetTop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect, &sipCpp))
        {
            int sipRes;

            try
            {
            sipRes = sipCpp->GetTop();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_GetTop, doc_wxRect_GetTop);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_GetTopLeft, "Rect.GetTopLeft() -> Point");

extern "C" {static PyObject *meth_wxRect_GetTopLeft(PyObject *, PyObject *);}
static PyObject *meth_wxRect_GetTopLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect, &sipCpp))
        {
            wxPoint *sipRes;

            try
            {
            sipRes = new wxPoint(sipCpp->GetTopLeft());
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_GetTopLeft, doc_wxRect_GetTopLeft);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_GetTopRight, "Rect.GetTopRight() -> Point");

extern "C" {static PyObject *meth_wxRect_GetTopRight(PyObject *, PyObject *);}
static PyObject *meth_wxRect_GetTopRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect, &sipCpp))
        {
            wxPoint *sipRes;

            try
            {
            sipRes = new wxPoint(sipCpp->GetTopRight());
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_GetTopRight, doc_wxRect_GetTopRight);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_GetWidth, "Rect.GetWidth() -> int");

extern "C" {static PyObject *meth_wxRect_GetWidth(PyObject *, PyObject *);}
static PyObject *meth_wxRect_GetWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect, &sipCpp))
        {
            int sipRes;

            try
            {
            sipRes = sipCpp->GetWidth();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_GetWidth, doc_wxRect_GetWidth);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_GetX, "Rect.GetX() -> int");

extern "C" {static PyObject *meth_wxRect_GetX(PyObject *, PyObject *);}
static PyObject *meth_wxRect_GetX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect, &sipCpp))
        {
            int sipRes;

            try
            {
            sipRes = sipCpp->GetX();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_GetX, doc_wxRect_GetX);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_GetY, "Rect.GetY() -> int");

extern "C" {static PyObject *meth_wxRect_GetY(PyObject *, PyObject *);}
static PyObject *meth_wxRect_GetY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect, &sipCpp))
        {
            int sipRes;

            try
            {
            sipRes = sipCpp->GetY();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_GetY, doc_wxRect_GetY);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_Intersect, "Rect.Intersect(Rect) -> Rect");

extern "C" {static PyObject *meth_wxRect_Intersect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect_Intersect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxRect * rect;
        int rectState = 0;
        wxRect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect, &sipCpp, sipType_wxRect, &rect, &rectState))
        {
            wxRect *sipRes;

            try
            {
            sipRes = &sipCpp->Intersect(*rect);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect *>(rect),sipType_wxRect,rectState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect *>(rect),sipType_wxRect,rectState);

            return sipConvertFromType(sipRes,sipType_wxRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_Intersect, doc_wxRect_Intersect);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_Intersects, "Rect.Intersects(Rect) -> bool");

extern "C" {static PyObject *meth_wxRect_Intersects(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect_Intersects(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxRect * rect;
        int rectState = 0;
        wxRect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect, &sipCpp, sipType_wxRect, &rect, &rectState))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->Intersects(*rect);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect *>(rect),sipType_wxRect,rectState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect *>(rect),sipType_wxRect,rectState);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_Intersects, doc_wxRect_Intersects);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_IsEmpty, "Rect.IsEmpty() -> bool");

extern "C" {static PyObject *meth_wxRect_IsEmpty(PyObject *, PyObject *);}
static PyObject *meth_wxRect_IsEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect, &sipCpp))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->IsEmpty();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_IsEmpty, doc_wxRect_IsEmpty);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_SetHeight, "Rect.SetHeight(int)");

extern "C" {static PyObject *meth_wxRect_SetHeight(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect_SetHeight(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int height;
        wxRect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxRect, &sipCpp, &height))
        {
            try
            {
            sipCpp->SetHeight(height);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_SetHeight, doc_wxRect_SetHeight);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_SetSize, "Rect.SetSize(Size)");

extern "C" {static PyObject *meth_wxRect_SetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect_SetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxSize * s;
        int sState = 0;
        wxRect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_s,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect, &sipCpp, sipType_wxSize, &s, &sState))
        {
            try
            {
            sipCpp->SetSize(*s);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxSize *>(s),sipType_wxSize,sState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxSize *>(s),sipType_wxSize,sState);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_SetSize, doc_wxRect_SetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_SetWidth, "Rect.SetWidth(int)");

extern "C" {static PyObject *meth_wxRect_SetWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect_SetWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int width;
        wxRect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxRect, &sipCpp, &width))
        {
            try
            {
            sipCpp->SetWidth(width);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_SetWidth, doc_wxRect_SetWidth);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_SetX, "Rect.SetX(int)");

extern "C" {static PyObject *meth_wxRect_SetX(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect_SetX(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int x;
        wxRect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxRect, &sipCpp, &x))
        {
            try
            {
            sipCpp->SetX(x);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_SetX, doc_wxRect_SetX);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_SetY, "Rect.SetY(int)");

extern "C" {static PyObject *meth_wxRect_SetY(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect_SetY(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int y;
        wxRect *sipCpp;

        static const char *sipKwdList[] = {
            sipName_y,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxRect, &sipCpp, &y))
        {
            try
            {
            sipCpp->SetY(y);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_SetY, doc_wxRect_SetY);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect_Get, "Rect.Get() -> object");

extern "C" {static PyObject *meth_wxRect_Get(PyObject *, PyObject *);}
static PyObject *meth_wxRect_Get(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect, &sipCpp))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 567 "sip/gen/gdicmn.sip"
        sipRes = sipBuildResult(&sipIsErr, "(iiii)", 
                                sipCpp->x, sipCpp->y, sipCpp->width, sipCpp->height);
#line 1385 "sip_corewxRect.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect, sipName_Get, doc_wxRect_Get);

    return NULL;
}


extern "C" {static PyObject *slot_wxRect___eq__(PyObject *,PyObject *);}
static PyObject *slot_wxRect___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    wxRect *sipCpp = reinterpret_cast<wxRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxRect));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const wxRect * r2;
        int r2State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_wxRect, &r2, &r2State))
        {
            bool sipRes;

            try
            {
            sipRes = operator==((*sipCpp), *r2);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect *>(r2),sipType_wxRect,r2State);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect *>(r2),sipType_wxRect,r2State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__core,eq_slot,sipType_wxRect,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_wxRect___ne__(PyObject *,PyObject *);}
static PyObject *slot_wxRect___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    wxRect *sipCpp = reinterpret_cast<wxRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxRect));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const wxRect * r2;
        int r2State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_wxRect, &r2, &r2State))
        {
            bool sipRes;

            try
            {
            sipRes = operator!=((*sipCpp), *r2);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect *>(r2),sipType_wxRect,r2State);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect *>(r2),sipType_wxRect,r2State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__core,ne_slot,sipType_wxRect,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_wxRect___add__(PyObject *,PyObject *);}
static PyObject *slot_wxRect___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const wxRect * r1;
        int r1State = 0;
        const wxRect * r2;
        int r2State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1J1", sipType_wxRect, &r1, &r1State, sipType_wxRect, &r2, &r2State))
        {
            wxRect *sipRes;

            try
            {
            sipRes = new wxRect((*r1 + *r2));
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect *>(r1),sipType_wxRect,r1State);
            sipReleaseType(const_cast<wxRect *>(r2),sipType_wxRect,r2State);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect *>(r1),sipType_wxRect,r1State);
            sipReleaseType(const_cast<wxRect *>(r2),sipType_wxRect,r2State);

            return sipConvertFromNewType(sipRes,sipType_wxRect,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__core,add_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_wxRect___mul__(PyObject *,PyObject *);}
static PyObject *slot_wxRect___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const wxRect * r1;
        int r1State = 0;
        const wxRect * r2;
        int r2State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1J1", sipType_wxRect, &r1, &r1State, sipType_wxRect, &r2, &r2State))
        {
            wxRect *sipRes;

            try
            {
            sipRes = new wxRect((*r1 * *r2));
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect *>(r1),sipType_wxRect,r1State);
            sipReleaseType(const_cast<wxRect *>(r2),sipType_wxRect,r2State);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect *>(r1),sipType_wxRect,r1State);
            sipReleaseType(const_cast<wxRect *>(r2),sipType_wxRect,r2State);

            return sipConvertFromNewType(sipRes,sipType_wxRect,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__core,mul_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_wxRect___imul__(PyObject *,PyObject *);}
static PyObject *slot_wxRect___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_wxRect)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    wxRect *sipCpp = reinterpret_cast<wxRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxRect));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const wxRect * r;
        int rState = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_wxRect, &r, &rState))
        {
            try
            {
            sipCpp->wxRect::operator*=(*r);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect *>(r),sipType_wxRect,rState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect *>(r),sipType_wxRect,rState);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_wxRect___iadd__(PyObject *,PyObject *);}
static PyObject *slot_wxRect___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_wxRect)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    wxRect *sipCpp = reinterpret_cast<wxRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxRect));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const wxRect * r;
        int rState = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_wxRect, &r, &rState))
        {
            try
            {
            sipCpp->wxRect::operator+=(*r);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect *>(r),sipType_wxRect,rState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect *>(r),sipType_wxRect,rState);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_wxRect(void *, const sipTypeDef *);}
static void *cast_wxRect(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_wxRect)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxRect(void *, int);}
static void release_wxRect(void *sipCppV,int)
{
    delete reinterpret_cast<wxRect *>(sipCppV);
}


extern "C" {static void assign_wxRect(void *, SIP_SSIZE_T, const void *);}
static void assign_wxRect(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<wxRect *>(sipDst)[sipDstIdx] = *reinterpret_cast<const wxRect *>(sipSrc);
}


extern "C" {static void *array_wxRect(SIP_SSIZE_T);}
static void *array_wxRect(SIP_SSIZE_T sipNrElem)
{
    return new wxRect[sipNrElem];
}


extern "C" {static void *copy_wxRect(const void *, SIP_SSIZE_T);}
static void *copy_wxRect(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new wxRect(reinterpret_cast<const wxRect *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxRect(sipSimpleWrapper *);}
static void dealloc_wxRect(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_wxRect(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_wxRect(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_wxRect(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    wxRect *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            try
            {
            sipCpp = new wxRect();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipCpp;
        }
    }

    {
        int x;
        int y;
        int width;
        int height;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "iiii", &x, &y, &width, &height))
        {
            try
            {
            sipCpp = new wxRect(x,y,width,height);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipCpp;
        }
    }

    {
        const wxPoint * pos;
        int posState = 0;
        const wxSize * size;
        int sizeState = 0;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_size,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J1", sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState))
        {
            try
            {
            sipCpp = new wxRect(*pos,*size);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast<wxSize *>(size),sipType_wxSize,sizeState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast<wxSize *>(size),sipType_wxSize,sizeState);

            return sipCpp;
        }
    }

    {
        const wxSize * size;
        int sizeState = 0;

        static const char *sipKwdList[] = {
            sipName_size,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1", sipType_wxSize, &size, &sizeState))
        {
            try
            {
            sipCpp = new wxRect(*size);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxSize *>(size),sipType_wxSize,sizeState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxSize *>(size),sipType_wxSize,sizeState);

            return sipCpp;
        }
    }

    {
        const wxPoint * topLeft;
        int topLeftState = 0;
        const wxPoint * bottomRight;
        int bottomRightState = 0;

        static const char *sipKwdList[] = {
            sipName_topLeft,
            sipName_bottomRight,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J1", sipType_wxPoint, &topLeft, &topLeftState, sipType_wxPoint, &bottomRight, &bottomRightState))
        {
            try
            {
            sipCpp = new wxRect(*topLeft,*bottomRight);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint *>(topLeft),sipType_wxPoint,topLeftState);
            sipReleaseType(const_cast<wxPoint *>(bottomRight),sipType_wxPoint,bottomRightState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint *>(topLeft),sipType_wxPoint,topLeftState);
            sipReleaseType(const_cast<wxPoint *>(bottomRight),sipType_wxPoint,bottomRightState);

            return sipCpp;
        }
    }

    {
        const wxRect * a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_wxRect, &a0, &a0State))
        {
            try
            {
            sipCpp = new wxRect(*a0);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect *>(a0),sipType_wxRect,a0State);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect *>(a0),sipType_wxRect,a0State);

            return sipCpp;
        }
    }

    return NULL;
}


extern "C" {static int convertTo_wxRect(PyObject *, void **, int *, PyObject *);}
static int convertTo_wxRect(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    wxRect **sipCppPtr = reinterpret_cast<wxRect **>(sipCppPtrV);

#line 572 "sip/gen/gdicmn.sip"
        // is it just a typecheck?
        if (!sipIsErr) {
            if (sipCanConvertToType(sipPy, sipType_wxRect, SIP_NO_CONVERTORS))
                return 1;
        
            if (PySequence_Check(sipPy) && PySequence_Size(sipPy) == 4) {
                int rval = 1;
                PyObject* o1 = PySequence_ITEM(sipPy, 0);
                PyObject* o2 = PySequence_ITEM(sipPy, 1);
                PyObject* o3 = PySequence_ITEM(sipPy, 2);
                PyObject* o4 = PySequence_ITEM(sipPy, 3);
                if (!PyNumber_Check(o1) || !PyNumber_Check(o2) || !PyNumber_Check(o3) || !PyNumber_Check(o4)) 
                    rval = 0;
                Py_DECREF(o1);
                Py_DECREF(o2);
                Py_DECREF(o3);
                Py_DECREF(o4);
                return rval;
            }
            return 0;
        }   
        
        // otherwise do the conversion
        if (PySequence_Check(sipPy)) {
            PyObject* o1 = PySequence_ITEM(sipPy, 0);
            PyObject* o2 = PySequence_ITEM(sipPy, 1);
            PyObject* o3 = PySequence_ITEM(sipPy, 2);
            PyObject* o4 = PySequence_ITEM(sipPy, 3);       
            *sipCppPtr = new wxRect(PyInt_AsLong(o1), PyInt_AsLong(o2),
                                     PyInt_AsLong(o3), PyInt_AsLong(o4));
            Py_DECREF(o1);
            Py_DECREF(o2);
            return sipGetState(sipTransferObj);
         }    
         *sipCppPtr = reinterpret_cast<wxRect*>(sipConvertToType(
                     sipPy, sipType_wxRect, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));
         return 0;
#line 1931 "sip_corewxRect.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_wxRect[] = {
    {(void *)slot_wxRect___eq__, eq_slot},
    {(void *)slot_wxRect___ne__, ne_slot},
    {(void *)slot_wxRect___add__, add_slot},
    {(void *)slot_wxRect___mul__, mul_slot},
    {(void *)slot_wxRect___imul__, imul_slot},
    {(void *)slot_wxRect___iadd__, iadd_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_wxRect[] = {
    {SIP_MLNAME_CAST(sipName_CenterIn), (PyCFunction)meth_wxRect_CenterIn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect_CenterIn)},
    {SIP_MLNAME_CAST(sipName_CentreIn), (PyCFunction)meth_wxRect_CentreIn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect_CentreIn)},
    {SIP_MLNAME_CAST(sipName_Contains), (PyCFunction)meth_wxRect_Contains, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect_Contains)},
    {SIP_MLNAME_CAST(sipName_Deflate), (PyCFunction)meth_wxRect_Deflate, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect_Deflate)},
    {SIP_MLNAME_CAST(sipName_Get), meth_wxRect_Get, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect_Get)},
    {SIP_MLNAME_CAST(sipName_GetBottom), meth_wxRect_GetBottom, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect_GetBottom)},
    {SIP_MLNAME_CAST(sipName_GetBottomLeft), meth_wxRect_GetBottomLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect_GetBottomLeft)},
    {SIP_MLNAME_CAST(sipName_GetBottomRight), meth_wxRect_GetBottomRight, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect_GetBottomRight)},
    {SIP_MLNAME_CAST(sipName_GetHeight), meth_wxRect_GetHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect_GetHeight)},
    {SIP_MLNAME_CAST(sipName_GetLeft), meth_wxRect_GetLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect_GetLeft)},
    {SIP_MLNAME_CAST(sipName_GetPosition), meth_wxRect_GetPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect_GetPosition)},
    {SIP_MLNAME_CAST(sipName_GetRight), meth_wxRect_GetRight, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect_GetRight)},
    {SIP_MLNAME_CAST(sipName_GetSize), meth_wxRect_GetSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect_GetSize)},
    {SIP_MLNAME_CAST(sipName_GetTop), meth_wxRect_GetTop, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect_GetTop)},
    {SIP_MLNAME_CAST(sipName_GetTopLeft), meth_wxRect_GetTopLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect_GetTopLeft)},
    {SIP_MLNAME_CAST(sipName_GetTopRight), meth_wxRect_GetTopRight, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect_GetTopRight)},
    {SIP_MLNAME_CAST(sipName_GetWidth), meth_wxRect_GetWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect_GetWidth)},
    {SIP_MLNAME_CAST(sipName_GetX), meth_wxRect_GetX, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect_GetX)},
    {SIP_MLNAME_CAST(sipName_GetY), meth_wxRect_GetY, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect_GetY)},
    {SIP_MLNAME_CAST(sipName_Inflate), (PyCFunction)meth_wxRect_Inflate, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect_Inflate)},
    {SIP_MLNAME_CAST(sipName_Intersect), (PyCFunction)meth_wxRect_Intersect, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect_Intersect)},
    {SIP_MLNAME_CAST(sipName_Intersects), (PyCFunction)meth_wxRect_Intersects, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect_Intersects)},
    {SIP_MLNAME_CAST(sipName_IsEmpty), meth_wxRect_IsEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect_IsEmpty)},
    {SIP_MLNAME_CAST(sipName_Offset), (PyCFunction)meth_wxRect_Offset, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect_Offset)},
    {SIP_MLNAME_CAST(sipName_SetHeight), (PyCFunction)meth_wxRect_SetHeight, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect_SetHeight)},
    {SIP_MLNAME_CAST(sipName_SetSize), (PyCFunction)meth_wxRect_SetSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect_SetSize)},
    {SIP_MLNAME_CAST(sipName_SetWidth), (PyCFunction)meth_wxRect_SetWidth, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect_SetWidth)},
    {SIP_MLNAME_CAST(sipName_SetX), (PyCFunction)meth_wxRect_SetX, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect_SetX)},
    {SIP_MLNAME_CAST(sipName_SetY), (PyCFunction)meth_wxRect_SetY, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect_SetY)},
    {SIP_MLNAME_CAST(sipName_Union), (PyCFunction)meth_wxRect_Union, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect_Union)}
};


extern "C" {static PyObject *varget_wxRect_height(void *, PyObject *);}
static PyObject *varget_wxRect_height(void *sipSelf, PyObject *)
{
    int sipVal;
    wxRect *sipCpp = reinterpret_cast<wxRect *>(sipSelf);

    sipVal = sipCpp->height;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_wxRect_height(void *, PyObject *, PyObject *);}
static int varset_wxRect_height(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
    wxRect *sipCpp = reinterpret_cast<wxRect *>(sipSelf);

    sipVal = (int)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->height = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_wxRect_width(void *, PyObject *);}
static PyObject *varget_wxRect_width(void *sipSelf, PyObject *)
{
    int sipVal;
    wxRect *sipCpp = reinterpret_cast<wxRect *>(sipSelf);

    sipVal = sipCpp->width;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_wxRect_width(void *, PyObject *, PyObject *);}
static int varset_wxRect_width(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
    wxRect *sipCpp = reinterpret_cast<wxRect *>(sipSelf);

    sipVal = (int)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->width = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_wxRect_x(void *, PyObject *);}
static PyObject *varget_wxRect_x(void *sipSelf, PyObject *)
{
    int sipVal;
    wxRect *sipCpp = reinterpret_cast<wxRect *>(sipSelf);

    sipVal = sipCpp->x;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_wxRect_x(void *, PyObject *, PyObject *);}
static int varset_wxRect_x(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
    wxRect *sipCpp = reinterpret_cast<wxRect *>(sipSelf);

    sipVal = (int)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->x = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_wxRect_y(void *, PyObject *);}
static PyObject *varget_wxRect_y(void *sipSelf, PyObject *)
{
    int sipVal;
    wxRect *sipCpp = reinterpret_cast<wxRect *>(sipSelf);

    sipVal = sipCpp->y;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_wxRect_y(void *, PyObject *, PyObject *);}
static int varset_wxRect_y(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
    wxRect *sipCpp = reinterpret_cast<wxRect *>(sipSelf);

    sipVal = (int)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->y = sipVal;

    return 0;
}

sipVariableDef variables_wxRect[] = {
    {PropertyVariable, sipName_topRight, &methods_wxRect[15], NULL, NULL, NULL},
    {PropertyVariable, sipName_topLeft, &methods_wxRect[14], NULL, NULL, NULL},
    {PropertyVariable, sipName_bottomRight, &methods_wxRect[7], NULL, NULL, NULL},
    {PropertyVariable, sipName_bottomLeft, &methods_wxRect[6], NULL, NULL, NULL},
    {PropertyVariable, sipName_bottom, &methods_wxRect[5], NULL, NULL, NULL},
    {PropertyVariable, sipName_right, &methods_wxRect[11], NULL, NULL, NULL},
    {PropertyVariable, sipName_top, &methods_wxRect[13], NULL, NULL, NULL},
    {PropertyVariable, sipName_left, &methods_wxRect[9], NULL, NULL, NULL},
    {InstanceVariable, sipName_height, (PyMethodDef *)varget_wxRect_height, (PyMethodDef *)varset_wxRect_height, NULL, NULL},
    {InstanceVariable, sipName_width, (PyMethodDef *)varget_wxRect_width, (PyMethodDef *)varset_wxRect_width, NULL, NULL},
    {InstanceVariable, sipName_x, (PyMethodDef *)varget_wxRect_x, (PyMethodDef *)varset_wxRect_x, NULL, NULL},
    {InstanceVariable, sipName_y, (PyMethodDef *)varget_wxRect_y, (PyMethodDef *)varset_wxRect_y, NULL, NULL},
};

PyDoc_STRVAR(doc_wxRect, "\1Rect()\n"
    "Rect(int, int, int, int)\n"
    "Rect(Point, Size)\n"
    "Rect(Size)\n"
    "Rect(Point, Point)\n"
    "Rect(Rect)");


sipClassTypeDef sipTypeDef__core_wxRect = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_wxRect,
        {0}
    },
    {
        sipNameNr_Rect,
        {0, 0, 1},
        30, methods_wxRect,
        0, 0,
        12, variables_wxRect,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxRect,
    -1,
    -1,
    0,
    slots_wxRect,
    init_wxRect,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxRect,
    assign_wxRect,
    array_wxRect,
    copy_wxRect,
    release_wxRect,
    cast_wxRect,
    convertTo_wxRect,
    0,
    0
};
