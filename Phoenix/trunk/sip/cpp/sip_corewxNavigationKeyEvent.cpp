/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.12-snapshot-93040d2c716c
 *
 *     Copyright: (c) 2010 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

#line 960 "sip/gen/event.sip"
    #include <wx/event.h>
#line 15 "sip_corewxNavigationKeyEvent.cpp"

#line 40 "sip/gen/object.sip"
    #include <wx/object.h>
#line 19 "sip_corewxNavigationKeyEvent.cpp"
#line 129 "sip/gen/event.sip"
    #include <wx/event.h>
#line 22 "sip_corewxNavigationKeyEvent.cpp"
#line 17 "sip/gen/object.sip"
    #include <wx/object.h>
#line 25 "sip_corewxNavigationKeyEvent.cpp"
#line 84 "sip/gen/object.sip"
    #include <wx/object.h>
#line 28 "sip_corewxNavigationKeyEvent.cpp"


class sipwxNavigationKeyEvent : public wxNavigationKeyEvent
{
public:
    sipwxNavigationKeyEvent();
    sipwxNavigationKeyEvent(const wxNavigationKeyEvent&);
    virtual ~sipwxNavigationKeyEvent();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    wxEvent * Clone();
    wxEventCategory GetEventCategory();
    wxClassInfo * GetClassInfo();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxNavigationKeyEvent(const sipwxNavigationKeyEvent &);
    sipwxNavigationKeyEvent &operator = (const sipwxNavigationKeyEvent &);

    char sipPyMethods[3];
};

sipwxNavigationKeyEvent::sipwxNavigationKeyEvent(): wxNavigationKeyEvent(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxNavigationKeyEvent::sipwxNavigationKeyEvent(const wxNavigationKeyEvent& a0): wxNavigationKeyEvent(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxNavigationKeyEvent::~sipwxNavigationKeyEvent()
{
    sipCommonDtor(sipPySelf);
}

wxEvent * sipwxNavigationKeyEvent::Clone()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_Clone);

    if (!sipMeth)
        return wxEvent::Clone();

    extern wxEvent * sipVH__core_1(sip_gilstate_t,PyObject *);

    return sipVH__core_1(sipGILState,sipMeth);
}

wxEventCategory sipwxNavigationKeyEvent::GetEventCategory()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_GetEventCategory);

    if (!sipMeth)
        return wxEvent::GetEventCategory();

    extern wxEventCategory sipVH__core_0(sip_gilstate_t,PyObject *);

    return sipVH__core_0(sipGILState,sipMeth);
}

wxClassInfo * sipwxNavigationKeyEvent::GetClassInfo()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_GetClassInfo);

    if (!sipMeth)
        return wxObject::GetClassInfo();

    extern wxClassInfo * sipVH__core_6(sip_gilstate_t,PyObject *);

    return sipVH__core_6(sipGILState,sipMeth);
}


PyDoc_STRVAR(doc_wxNavigationKeyEvent_GetCurrentFocus, "NavigationKeyEvent.GetCurrentFocus() -> Window");

extern "C" {static PyObject *meth_wxNavigationKeyEvent_GetCurrentFocus(PyObject *, PyObject *);}
static PyObject *meth_wxNavigationKeyEvent_GetCurrentFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxNavigationKeyEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxNavigationKeyEvent, &sipCpp))
        {
            wxWindow *sipRes;

            try
            {
            sipRes = sipCpp->GetCurrentFocus();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromType(sipRes,sipType_wxWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NavigationKeyEvent, sipName_GetCurrentFocus, doc_wxNavigationKeyEvent_GetCurrentFocus);

    return NULL;
}


PyDoc_STRVAR(doc_wxNavigationKeyEvent_GetDirection, "NavigationKeyEvent.GetDirection() -> bool");

extern "C" {static PyObject *meth_wxNavigationKeyEvent_GetDirection(PyObject *, PyObject *);}
static PyObject *meth_wxNavigationKeyEvent_GetDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxNavigationKeyEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxNavigationKeyEvent, &sipCpp))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->GetDirection();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NavigationKeyEvent, sipName_GetDirection, doc_wxNavigationKeyEvent_GetDirection);

    return NULL;
}


PyDoc_STRVAR(doc_wxNavigationKeyEvent_IsFromTab, "NavigationKeyEvent.IsFromTab() -> bool");

extern "C" {static PyObject *meth_wxNavigationKeyEvent_IsFromTab(PyObject *, PyObject *);}
static PyObject *meth_wxNavigationKeyEvent_IsFromTab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxNavigationKeyEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxNavigationKeyEvent, &sipCpp))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->IsFromTab();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NavigationKeyEvent, sipName_IsFromTab, doc_wxNavigationKeyEvent_IsFromTab);

    return NULL;
}


PyDoc_STRVAR(doc_wxNavigationKeyEvent_IsWindowChange, "NavigationKeyEvent.IsWindowChange() -> bool");

extern "C" {static PyObject *meth_wxNavigationKeyEvent_IsWindowChange(PyObject *, PyObject *);}
static PyObject *meth_wxNavigationKeyEvent_IsWindowChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxNavigationKeyEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxNavigationKeyEvent, &sipCpp))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->IsWindowChange();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NavigationKeyEvent, sipName_IsWindowChange, doc_wxNavigationKeyEvent_IsWindowChange);

    return NULL;
}


PyDoc_STRVAR(doc_wxNavigationKeyEvent_SetCurrentFocus, "NavigationKeyEvent.SetCurrentFocus(Window)");

extern "C" {static PyObject *meth_wxNavigationKeyEvent_SetCurrentFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxNavigationKeyEvent_SetCurrentFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        wxWindow * currentFocus;
        wxNavigationKeyEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_currentFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxNavigationKeyEvent, &sipCpp, sipType_wxWindow, &currentFocus))
        {
            try
            {
            sipCpp->SetCurrentFocus(currentFocus);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NavigationKeyEvent, sipName_SetCurrentFocus, doc_wxNavigationKeyEvent_SetCurrentFocus);

    return NULL;
}


PyDoc_STRVAR(doc_wxNavigationKeyEvent_SetDirection, "NavigationKeyEvent.SetDirection(bool)");

extern "C" {static PyObject *meth_wxNavigationKeyEvent_SetDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxNavigationKeyEvent_SetDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool direction;
        wxNavigationKeyEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxNavigationKeyEvent, &sipCpp, &direction))
        {
            try
            {
            sipCpp->SetDirection(direction);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NavigationKeyEvent, sipName_SetDirection, doc_wxNavigationKeyEvent_SetDirection);

    return NULL;
}


PyDoc_STRVAR(doc_wxNavigationKeyEvent_SetFlags, "NavigationKeyEvent.SetFlags(int)");

extern "C" {static PyObject *meth_wxNavigationKeyEvent_SetFlags(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxNavigationKeyEvent_SetFlags(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        long flags;
        wxNavigationKeyEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bl", &sipSelf, sipType_wxNavigationKeyEvent, &sipCpp, &flags))
        {
            try
            {
            sipCpp->SetFlags(flags);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NavigationKeyEvent, sipName_SetFlags, doc_wxNavigationKeyEvent_SetFlags);

    return NULL;
}


PyDoc_STRVAR(doc_wxNavigationKeyEvent_SetFromTab, "NavigationKeyEvent.SetFromTab(bool)");

extern "C" {static PyObject *meth_wxNavigationKeyEvent_SetFromTab(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxNavigationKeyEvent_SetFromTab(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool fromTab;
        wxNavigationKeyEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_fromTab,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxNavigationKeyEvent, &sipCpp, &fromTab))
        {
            try
            {
            sipCpp->SetFromTab(fromTab);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NavigationKeyEvent, sipName_SetFromTab, doc_wxNavigationKeyEvent_SetFromTab);

    return NULL;
}


PyDoc_STRVAR(doc_wxNavigationKeyEvent_SetWindowChange, "NavigationKeyEvent.SetWindowChange(bool)");

extern "C" {static PyObject *meth_wxNavigationKeyEvent_SetWindowChange(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxNavigationKeyEvent_SetWindowChange(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool windowChange;
        wxNavigationKeyEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_windowChange,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxNavigationKeyEvent, &sipCpp, &windowChange))
        {
            try
            {
            sipCpp->SetWindowChange(windowChange);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NavigationKeyEvent, sipName_SetWindowChange, doc_wxNavigationKeyEvent_SetWindowChange);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_wxNavigationKeyEvent(void *, const sipTypeDef *);}
static void *cast_wxNavigationKeyEvent(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_wxNavigationKeyEvent)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_wxEvent)->ctd_cast((wxEvent *)(wxNavigationKeyEvent *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxNavigationKeyEvent(void *, int);}
static void release_wxNavigationKeyEvent(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxNavigationKeyEvent *>(sipCppV);
    else
        delete reinterpret_cast<wxNavigationKeyEvent *>(sipCppV);
}


extern "C" {static void dealloc_wxNavigationKeyEvent(sipSimpleWrapper *);}
static void dealloc_wxNavigationKeyEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipwxNavigationKeyEvent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_wxNavigationKeyEvent(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_wxNavigationKeyEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_wxNavigationKeyEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxNavigationKeyEvent *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            try
            {
            sipCpp = new sipwxNavigationKeyEvent();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const wxNavigationKeyEvent * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxNavigationKeyEvent, &a0))
        {
            try
            {
            sipCpp = new sipwxNavigationKeyEvent(*a0);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxNavigationKeyEvent[] = {{19, 255, 1}};


static PyMethodDef methods_wxNavigationKeyEvent[] = {
    {SIP_MLNAME_CAST(sipName_GetCurrentFocus), meth_wxNavigationKeyEvent_GetCurrentFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxNavigationKeyEvent_GetCurrentFocus)},
    {SIP_MLNAME_CAST(sipName_GetDirection), meth_wxNavigationKeyEvent_GetDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_wxNavigationKeyEvent_GetDirection)},
    {SIP_MLNAME_CAST(sipName_IsFromTab), meth_wxNavigationKeyEvent_IsFromTab, METH_VARARGS, SIP_MLDOC_CAST(doc_wxNavigationKeyEvent_IsFromTab)},
    {SIP_MLNAME_CAST(sipName_IsWindowChange), meth_wxNavigationKeyEvent_IsWindowChange, METH_VARARGS, SIP_MLDOC_CAST(doc_wxNavigationKeyEvent_IsWindowChange)},
    {SIP_MLNAME_CAST(sipName_SetCurrentFocus), (PyCFunction)meth_wxNavigationKeyEvent_SetCurrentFocus, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxNavigationKeyEvent_SetCurrentFocus)},
    {SIP_MLNAME_CAST(sipName_SetDirection), (PyCFunction)meth_wxNavigationKeyEvent_SetDirection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxNavigationKeyEvent_SetDirection)},
    {SIP_MLNAME_CAST(sipName_SetFlags), (PyCFunction)meth_wxNavigationKeyEvent_SetFlags, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxNavigationKeyEvent_SetFlags)},
    {SIP_MLNAME_CAST(sipName_SetFromTab), (PyCFunction)meth_wxNavigationKeyEvent_SetFromTab, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxNavigationKeyEvent_SetFromTab)},
    {SIP_MLNAME_CAST(sipName_SetWindowChange), (PyCFunction)meth_wxNavigationKeyEvent_SetWindowChange, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxNavigationKeyEvent_SetWindowChange)}
};

static sipEnumMemberDef enummembers_wxNavigationKeyEvent[] = {
    {sipName_FromTab, wxNavigationKeyEvent::FromTab, 51},
    {sipName_IsBackward, wxNavigationKeyEvent::IsBackward, 51},
    {sipName_IsForward, wxNavigationKeyEvent::IsForward, 51},
    {sipName_WinChange, wxNavigationKeyEvent::WinChange, 51},
};

sipVariableDef variables_wxNavigationKeyEvent[] = {
    {PropertyVariable, sipName_Direction, &methods_wxNavigationKeyEvent[1], &methods_wxNavigationKeyEvent[5], NULL, NULL},
    {PropertyVariable, sipName_CurrentFocus, &methods_wxNavigationKeyEvent[0], &methods_wxNavigationKeyEvent[4], NULL, NULL},
};

PyDoc_STRVAR(doc_wxNavigationKeyEvent, "\1NavigationKeyEvent()\n"
    "NavigationKeyEvent(NavigationKeyEvent)");


sipClassTypeDef sipTypeDef__core_wxNavigationKeyEvent = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_wxNavigationKeyEvent,
        {0}
    },
    {
        sipNameNr_NavigationKeyEvent,
        {0, 0, 1},
        9, methods_wxNavigationKeyEvent,
        4, enummembers_wxNavigationKeyEvent,
        2, variables_wxNavigationKeyEvent,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxNavigationKeyEvent,
    -1,
    -1,
    supers_wxNavigationKeyEvent,
    0,
    init_wxNavigationKeyEvent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxNavigationKeyEvent,
    0,
    0,
    0,
    release_wxNavigationKeyEvent,
    cast_wxNavigationKeyEvent,
    0,
    0,
    0
};
