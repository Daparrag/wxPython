/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.12-snapshot-93040d2c716c
 *
 *     Copyright: (c) 2010 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

#line 129 "sip/gen/event.sip"
    #include <wx/event.h>
#line 15 "sip_corewxEvent.cpp"

#line 40 "sip/gen/object.sip"
    #include <wx/object.h>
#line 19 "sip_corewxEvent.cpp"
#line 17 "sip/gen/object.sip"
    #include <wx/object.h>
#line 22 "sip_corewxEvent.cpp"
#line 84 "sip/gen/object.sip"
    #include <wx/object.h>
#line 25 "sip_corewxEvent.cpp"


PyDoc_STRVAR(doc_wxEvent_Clone, "Event.Clone() -> Event");

extern "C" {static PyObject *meth_wxEvent_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxEvent_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        wxEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxEvent, &sipCpp))
        {
            wxEvent *sipRes;

            try
            {
            sipRes = (sipSelfWasArg ? sipCpp->wxEvent::Clone() : sipCpp->Clone());
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromNewType(sipRes,sipType_wxEvent,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Event, sipName_Clone, doc_wxEvent_Clone);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvent_GetEventObject, "Event.GetEventObject() -> Object");

extern "C" {static PyObject *meth_wxEvent_GetEventObject(PyObject *, PyObject *);}
static PyObject *meth_wxEvent_GetEventObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxEvent, &sipCpp))
        {
            wxObject *sipRes;

            try
            {
            sipRes = sipCpp->GetEventObject();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromType(sipRes,sipType_wxObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Event, sipName_GetEventObject, doc_wxEvent_GetEventObject);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvent_GetEventType, "Event.GetEventType() -> int");

extern "C" {static PyObject *meth_wxEvent_GetEventType(PyObject *, PyObject *);}
static PyObject *meth_wxEvent_GetEventType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxEvent, &sipCpp))
        {
            wxEventType sipRes;

            try
            {
            sipRes = sipCpp->GetEventType();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Event, sipName_GetEventType, doc_wxEvent_GetEventType);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvent_GetEventCategory, "Event.GetEventCategory() -> EventCategory");

extern "C" {static PyObject *meth_wxEvent_GetEventCategory(PyObject *, PyObject *);}
static PyObject *meth_wxEvent_GetEventCategory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        wxEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxEvent, &sipCpp))
        {
            wxEventCategory sipRes;

            try
            {
            sipRes = (sipSelfWasArg ? sipCpp->wxEvent::GetEventCategory() : sipCpp->GetEventCategory());
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromEnum(sipRes,sipType_wxEventCategory);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Event, sipName_GetEventCategory, doc_wxEvent_GetEventCategory);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvent_GetId, "Event.GetId() -> int");

extern "C" {static PyObject *meth_wxEvent_GetId(PyObject *, PyObject *);}
static PyObject *meth_wxEvent_GetId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxEvent, &sipCpp))
        {
            int sipRes;

            try
            {
            sipRes = sipCpp->GetId();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Event, sipName_GetId, doc_wxEvent_GetId);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvent_GetSkipped, "Event.GetSkipped() -> bool");

extern "C" {static PyObject *meth_wxEvent_GetSkipped(PyObject *, PyObject *);}
static PyObject *meth_wxEvent_GetSkipped(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxEvent, &sipCpp))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->GetSkipped();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Event, sipName_GetSkipped, doc_wxEvent_GetSkipped);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvent_GetTimestamp, "Event.GetTimestamp() -> int");

extern "C" {static PyObject *meth_wxEvent_GetTimestamp(PyObject *, PyObject *);}
static PyObject *meth_wxEvent_GetTimestamp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxEvent, &sipCpp))
        {
            long sipRes;

            try
            {
            sipRes = sipCpp->GetTimestamp();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Event, sipName_GetTimestamp, doc_wxEvent_GetTimestamp);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvent_IsCommandEvent, "Event.IsCommandEvent() -> bool");

extern "C" {static PyObject *meth_wxEvent_IsCommandEvent(PyObject *, PyObject *);}
static PyObject *meth_wxEvent_IsCommandEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxEvent, &sipCpp))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->IsCommandEvent();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Event, sipName_IsCommandEvent, doc_wxEvent_IsCommandEvent);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvent_ResumePropagation, "Event.ResumePropagation(int)");

extern "C" {static PyObject *meth_wxEvent_ResumePropagation(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxEvent_ResumePropagation(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int propagationLevel;
        wxEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_propagationLevel,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxEvent, &sipCpp, &propagationLevel))
        {
            try
            {
            sipCpp->ResumePropagation(propagationLevel);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Event, sipName_ResumePropagation, doc_wxEvent_ResumePropagation);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvent_SetEventObject, "Event.SetEventObject(Object)");

extern "C" {static PyObject *meth_wxEvent_SetEventObject(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxEvent_SetEventObject(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        wxObject * object;
        wxEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_object,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxEvent, &sipCpp, sipType_wxObject, &object))
        {
            try
            {
            sipCpp->SetEventObject(object);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Event, sipName_SetEventObject, doc_wxEvent_SetEventObject);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvent_SetEventType, "Event.SetEventType(int)");

extern "C" {static PyObject *meth_wxEvent_SetEventType(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxEvent_SetEventType(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        wxEventType type;
        wxEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxEvent, &sipCpp, &type))
        {
            try
            {
            sipCpp->SetEventType(type);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Event, sipName_SetEventType, doc_wxEvent_SetEventType);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvent_SetId, "Event.SetId(int)");

extern "C" {static PyObject *meth_wxEvent_SetId(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxEvent_SetId(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int id;
        wxEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxEvent, &sipCpp, &id))
        {
            try
            {
            sipCpp->SetId(id);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Event, sipName_SetId, doc_wxEvent_SetId);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvent_SetTimestamp, "Event.SetTimestamp(int timeStamp=0)");

extern "C" {static PyObject *meth_wxEvent_SetTimestamp(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxEvent_SetTimestamp(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        long timeStamp = 0;
        wxEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_timeStamp,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|l", &sipSelf, sipType_wxEvent, &sipCpp, &timeStamp))
        {
            try
            {
            sipCpp->SetTimestamp(timeStamp);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Event, sipName_SetTimestamp, doc_wxEvent_SetTimestamp);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvent_ShouldPropagate, "Event.ShouldPropagate() -> bool");

extern "C" {static PyObject *meth_wxEvent_ShouldPropagate(PyObject *, PyObject *);}
static PyObject *meth_wxEvent_ShouldPropagate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxEvent, &sipCpp))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->ShouldPropagate();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Event, sipName_ShouldPropagate, doc_wxEvent_ShouldPropagate);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvent_Skip, "Event.Skip(bool skip=True)");

extern "C" {static PyObject *meth_wxEvent_Skip(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxEvent_Skip(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool skip = 1;
        wxEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_skip,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|b", &sipSelf, sipType_wxEvent, &sipCpp, &skip))
        {
            try
            {
            sipCpp->Skip(skip);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Event, sipName_Skip, doc_wxEvent_Skip);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvent_StopPropagation, "Event.StopPropagation() -> int");

extern "C" {static PyObject *meth_wxEvent_StopPropagation(PyObject *, PyObject *);}
static PyObject *meth_wxEvent_StopPropagation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxEvent, &sipCpp))
        {
            int sipRes;

            try
            {
            sipRes = sipCpp->StopPropagation();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Event, sipName_StopPropagation, doc_wxEvent_StopPropagation);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_wxEvent(void *, const sipTypeDef *);}
static void *cast_wxEvent(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_wxEvent)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_wxObject)->ctd_cast((wxObject *)(wxEvent *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxEvent(void *, int);}
static void release_wxEvent(void *sipCppV,int)
{
    delete reinterpret_cast<wxEvent *>(sipCppV);
}


extern "C" {static void dealloc_wxEvent(sipSimpleWrapper *);}
static void dealloc_wxEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_wxEvent(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxEvent[] = {{53, 255, 1}};


static PyMethodDef methods_wxEvent[] = {
    {SIP_MLNAME_CAST(sipName_Clone), meth_wxEvent_Clone, METH_VARARGS, SIP_MLDOC_CAST(doc_wxEvent_Clone)},
    {SIP_MLNAME_CAST(sipName_GetEventCategory), meth_wxEvent_GetEventCategory, METH_VARARGS, SIP_MLDOC_CAST(doc_wxEvent_GetEventCategory)},
    {SIP_MLNAME_CAST(sipName_GetEventObject), meth_wxEvent_GetEventObject, METH_VARARGS, SIP_MLDOC_CAST(doc_wxEvent_GetEventObject)},
    {SIP_MLNAME_CAST(sipName_GetEventType), meth_wxEvent_GetEventType, METH_VARARGS, SIP_MLDOC_CAST(doc_wxEvent_GetEventType)},
    {SIP_MLNAME_CAST(sipName_GetId), meth_wxEvent_GetId, METH_VARARGS, SIP_MLDOC_CAST(doc_wxEvent_GetId)},
    {SIP_MLNAME_CAST(sipName_GetSkipped), meth_wxEvent_GetSkipped, METH_VARARGS, SIP_MLDOC_CAST(doc_wxEvent_GetSkipped)},
    {SIP_MLNAME_CAST(sipName_GetTimestamp), meth_wxEvent_GetTimestamp, METH_VARARGS, SIP_MLDOC_CAST(doc_wxEvent_GetTimestamp)},
    {SIP_MLNAME_CAST(sipName_IsCommandEvent), meth_wxEvent_IsCommandEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_wxEvent_IsCommandEvent)},
    {SIP_MLNAME_CAST(sipName_ResumePropagation), (PyCFunction)meth_wxEvent_ResumePropagation, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxEvent_ResumePropagation)},
    {SIP_MLNAME_CAST(sipName_SetEventObject), (PyCFunction)meth_wxEvent_SetEventObject, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxEvent_SetEventObject)},
    {SIP_MLNAME_CAST(sipName_SetEventType), (PyCFunction)meth_wxEvent_SetEventType, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxEvent_SetEventType)},
    {SIP_MLNAME_CAST(sipName_SetId), (PyCFunction)meth_wxEvent_SetId, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxEvent_SetId)},
    {SIP_MLNAME_CAST(sipName_SetTimestamp), (PyCFunction)meth_wxEvent_SetTimestamp, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxEvent_SetTimestamp)},
    {SIP_MLNAME_CAST(sipName_ShouldPropagate), meth_wxEvent_ShouldPropagate, METH_VARARGS, SIP_MLDOC_CAST(doc_wxEvent_ShouldPropagate)},
    {SIP_MLNAME_CAST(sipName_Skip), (PyCFunction)meth_wxEvent_Skip, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxEvent_Skip)},
    {SIP_MLNAME_CAST(sipName_StopPropagation), meth_wxEvent_StopPropagation, METH_VARARGS, SIP_MLDOC_CAST(doc_wxEvent_StopPropagation)}
};

sipVariableDef variables_wxEvent[] = {
    {PropertyVariable, sipName_Timestamp, &methods_wxEvent[6], &methods_wxEvent[12], NULL, NULL},
    {PropertyVariable, sipName_Skipped, &methods_wxEvent[5], NULL, NULL, NULL},
    {PropertyVariable, sipName_Id, &methods_wxEvent[4], &methods_wxEvent[11], NULL, NULL},
    {PropertyVariable, sipName_EventType, &methods_wxEvent[3], &methods_wxEvent[10], NULL, NULL},
    {PropertyVariable, sipName_EventObject, &methods_wxEvent[2], &methods_wxEvent[9], NULL, NULL},
};


sipClassTypeDef sipTypeDef__core_wxEvent = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_wxEvent,
        {0}
    },
    {
        sipNameNr_Event,
        {0, 0, 1},
        16, methods_wxEvent,
        0, 0,
        5, variables_wxEvent,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_wxEvent,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxEvent,
    0,
    0,
    0,
    release_wxEvent,
    cast_wxEvent,
    0,
    0,
    0
};
