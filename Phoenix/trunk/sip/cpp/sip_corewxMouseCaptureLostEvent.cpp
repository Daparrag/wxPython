/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.12-snapshot-93040d2c716c
 *
 *     Copyright: (c) 2010 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

#line 802 "sip/gen/event.sip"
    #include <wx/event.h>
#line 15 "sip_corewxMouseCaptureLostEvent.cpp"

#line 40 "sip/gen/object.sip"
    #include <wx/object.h>
#line 19 "sip_corewxMouseCaptureLostEvent.cpp"
#line 129 "sip/gen/event.sip"
    #include <wx/event.h>
#line 22 "sip_corewxMouseCaptureLostEvent.cpp"
#line 17 "sip/gen/object.sip"
    #include <wx/object.h>
#line 25 "sip_corewxMouseCaptureLostEvent.cpp"
#line 84 "sip/gen/object.sip"
    #include <wx/object.h>
#line 28 "sip_corewxMouseCaptureLostEvent.cpp"


class sipwxMouseCaptureLostEvent : public wxMouseCaptureLostEvent
{
public:
    sipwxMouseCaptureLostEvent(wxWindowID);
    sipwxMouseCaptureLostEvent(const wxMouseCaptureLostEvent&);
    virtual ~sipwxMouseCaptureLostEvent();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    wxEvent * Clone();
    wxEventCategory GetEventCategory();
    wxClassInfo * GetClassInfo();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxMouseCaptureLostEvent(const sipwxMouseCaptureLostEvent &);
    sipwxMouseCaptureLostEvent &operator = (const sipwxMouseCaptureLostEvent &);

    char sipPyMethods[3];
};

sipwxMouseCaptureLostEvent::sipwxMouseCaptureLostEvent(wxWindowID windowId): wxMouseCaptureLostEvent(windowId), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxMouseCaptureLostEvent::sipwxMouseCaptureLostEvent(const wxMouseCaptureLostEvent& a0): wxMouseCaptureLostEvent(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxMouseCaptureLostEvent::~sipwxMouseCaptureLostEvent()
{
    sipCommonDtor(sipPySelf);
}

wxEvent * sipwxMouseCaptureLostEvent::Clone()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_Clone);

    if (!sipMeth)
        return wxEvent::Clone();

    extern wxEvent * sipVH__core_1(sip_gilstate_t,PyObject *);

    return sipVH__core_1(sipGILState,sipMeth);
}

wxEventCategory sipwxMouseCaptureLostEvent::GetEventCategory()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_GetEventCategory);

    if (!sipMeth)
        return wxEvent::GetEventCategory();

    extern wxEventCategory sipVH__core_0(sip_gilstate_t,PyObject *);

    return sipVH__core_0(sipGILState,sipMeth);
}

wxClassInfo * sipwxMouseCaptureLostEvent::GetClassInfo()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_GetClassInfo);

    if (!sipMeth)
        return wxObject::GetClassInfo();

    extern wxClassInfo * sipVH__core_6(sip_gilstate_t,PyObject *);

    return sipVH__core_6(sipGILState,sipMeth);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_wxMouseCaptureLostEvent(void *, const sipTypeDef *);}
static void *cast_wxMouseCaptureLostEvent(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_wxMouseCaptureLostEvent)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_wxEvent)->ctd_cast((wxEvent *)(wxMouseCaptureLostEvent *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxMouseCaptureLostEvent(void *, int);}
static void release_wxMouseCaptureLostEvent(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxMouseCaptureLostEvent *>(sipCppV);
    else
        delete reinterpret_cast<wxMouseCaptureLostEvent *>(sipCppV);
}


extern "C" {static void dealloc_wxMouseCaptureLostEvent(sipSimpleWrapper *);}
static void dealloc_wxMouseCaptureLostEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipwxMouseCaptureLostEvent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_wxMouseCaptureLostEvent(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_wxMouseCaptureLostEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_wxMouseCaptureLostEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxMouseCaptureLostEvent *sipCpp = 0;

    {
        wxWindowID windowId = 0;

        static const char *sipKwdList[] = {
            sipName_windowId,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|i", &windowId))
        {
            try
            {
            sipCpp = new sipwxMouseCaptureLostEvent(windowId);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const wxMouseCaptureLostEvent * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxMouseCaptureLostEvent, &a0))
        {
            try
            {
            sipCpp = new sipwxMouseCaptureLostEvent(*a0);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxMouseCaptureLostEvent[] = {{19, 255, 1}};

PyDoc_STRVAR(doc_wxMouseCaptureLostEvent, "\1MouseCaptureLostEvent(int windowId=0)\n"
    "MouseCaptureLostEvent(MouseCaptureLostEvent)");


sipClassTypeDef sipTypeDef__core_wxMouseCaptureLostEvent = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_wxMouseCaptureLostEvent,
        {0}
    },
    {
        sipNameNr_MouseCaptureLostEvent,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxMouseCaptureLostEvent,
    -1,
    -1,
    supers_wxMouseCaptureLostEvent,
    0,
    init_wxMouseCaptureLostEvent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxMouseCaptureLostEvent,
    0,
    0,
    0,
    release_wxMouseCaptureLostEvent,
    cast_wxMouseCaptureLostEvent,
    0,
    0,
    0
};
