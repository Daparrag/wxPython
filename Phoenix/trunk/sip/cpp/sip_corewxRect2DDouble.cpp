/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.12-snapshot-93040d2c716c
 *
 *     Copyright: (c) 2010 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

#line 210 "sip/gen/geometry.sip"
    #include <wx/geometry.h>
#line 15 "sip_corewxRect2DDouble.cpp"

#line 22 "sip/gen/geometry.sip"
    #include <wx/geometry.h>
#line 19 "sip_corewxRect2DDouble.cpp"
#line 177 "sip/gen/gdicmn.sip"
    #include <wx/gdicmn.h>
#line 22 "sip_corewxRect2DDouble.cpp"


PyDoc_STRVAR(doc_wxRect2DDouble_GetPosition, "Rect2D.GetPosition() -> Point2D");

extern "C" {static PyObject *meth_wxRect2DDouble_GetPosition(PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_GetPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect2DDouble *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect2DDouble, &sipCpp))
        {
            wxPoint2DDouble *sipRes;

            try
            {
            sipRes = new wxPoint2DDouble(sipCpp->GetPosition());
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromNewType(sipRes,sipType_wxPoint2DDouble,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_GetPosition, doc_wxRect2DDouble_GetPosition);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_GetSize, "Rect2D.GetSize() -> Size");

extern "C" {static PyObject *meth_wxRect2DDouble_GetSize(PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_GetSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect2DDouble *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect2DDouble, &sipCpp))
        {
            wxSize *sipRes;

            try
            {
            sipRes = new wxSize(sipCpp->GetSize());
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_GetSize, doc_wxRect2DDouble_GetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_GetLeft, "Rect2D.GetLeft() -> float");

extern "C" {static PyObject *meth_wxRect2DDouble_GetLeft(PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_GetLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect2DDouble *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect2DDouble, &sipCpp))
        {
            wxDouble sipRes;

            try
            {
            sipRes = sipCpp->GetLeft();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_GetLeft, doc_wxRect2DDouble_GetLeft);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_SetLeft, "Rect2D.SetLeft(float)");

extern "C" {static PyObject *meth_wxRect2DDouble_SetLeft(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_SetLeft(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        wxDouble n;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bd", &sipSelf, sipType_wxRect2DDouble, &sipCpp, &n))
        {
            try
            {
            sipCpp->SetLeft(n);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_SetLeft, doc_wxRect2DDouble_SetLeft);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_MoveLeftTo, "Rect2D.MoveLeftTo(float)");

extern "C" {static PyObject *meth_wxRect2DDouble_MoveLeftTo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_MoveLeftTo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        wxDouble n;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bd", &sipSelf, sipType_wxRect2DDouble, &sipCpp, &n))
        {
            try
            {
            sipCpp->MoveLeftTo(n);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_MoveLeftTo, doc_wxRect2DDouble_MoveLeftTo);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_GetTop, "Rect2D.GetTop() -> float");

extern "C" {static PyObject *meth_wxRect2DDouble_GetTop(PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_GetTop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect2DDouble *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect2DDouble, &sipCpp))
        {
            wxDouble sipRes;

            try
            {
            sipRes = sipCpp->GetTop();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_GetTop, doc_wxRect2DDouble_GetTop);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_SetTop, "Rect2D.SetTop(float)");

extern "C" {static PyObject *meth_wxRect2DDouble_SetTop(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_SetTop(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        wxDouble n;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bd", &sipSelf, sipType_wxRect2DDouble, &sipCpp, &n))
        {
            try
            {
            sipCpp->SetTop(n);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_SetTop, doc_wxRect2DDouble_SetTop);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_MoveTopTo, "Rect2D.MoveTopTo(float)");

extern "C" {static PyObject *meth_wxRect2DDouble_MoveTopTo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_MoveTopTo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        wxDouble n;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bd", &sipSelf, sipType_wxRect2DDouble, &sipCpp, &n))
        {
            try
            {
            sipCpp->MoveTopTo(n);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_MoveTopTo, doc_wxRect2DDouble_MoveTopTo);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_GetBottom, "Rect2D.GetBottom() -> float");

extern "C" {static PyObject *meth_wxRect2DDouble_GetBottom(PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_GetBottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect2DDouble *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect2DDouble, &sipCpp))
        {
            wxDouble sipRes;

            try
            {
            sipRes = sipCpp->GetBottom();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_GetBottom, doc_wxRect2DDouble_GetBottom);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_SetBottom, "Rect2D.SetBottom(float)");

extern "C" {static PyObject *meth_wxRect2DDouble_SetBottom(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_SetBottom(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        wxDouble n;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bd", &sipSelf, sipType_wxRect2DDouble, &sipCpp, &n))
        {
            try
            {
            sipCpp->SetBottom(n);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_SetBottom, doc_wxRect2DDouble_SetBottom);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_MoveBottomTo, "Rect2D.MoveBottomTo(float)");

extern "C" {static PyObject *meth_wxRect2DDouble_MoveBottomTo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_MoveBottomTo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        wxDouble n;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bd", &sipSelf, sipType_wxRect2DDouble, &sipCpp, &n))
        {
            try
            {
            sipCpp->MoveBottomTo(n);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_MoveBottomTo, doc_wxRect2DDouble_MoveBottomTo);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_GetRight, "Rect2D.GetRight() -> float");

extern "C" {static PyObject *meth_wxRect2DDouble_GetRight(PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_GetRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect2DDouble *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect2DDouble, &sipCpp))
        {
            wxDouble sipRes;

            try
            {
            sipRes = sipCpp->GetRight();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_GetRight, doc_wxRect2DDouble_GetRight);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_SetRight, "Rect2D.SetRight(float)");

extern "C" {static PyObject *meth_wxRect2DDouble_SetRight(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_SetRight(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        wxDouble n;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bd", &sipSelf, sipType_wxRect2DDouble, &sipCpp, &n))
        {
            try
            {
            sipCpp->SetRight(n);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_SetRight, doc_wxRect2DDouble_SetRight);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_MoveRightTo, "Rect2D.MoveRightTo(float)");

extern "C" {static PyObject *meth_wxRect2DDouble_MoveRightTo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_MoveRightTo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        wxDouble n;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bd", &sipSelf, sipType_wxRect2DDouble, &sipCpp, &n))
        {
            try
            {
            sipCpp->MoveRightTo(n);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_MoveRightTo, doc_wxRect2DDouble_MoveRightTo);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_GetLeftTop, "Rect2D.GetLeftTop() -> Point2D");

extern "C" {static PyObject *meth_wxRect2DDouble_GetLeftTop(PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_GetLeftTop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect2DDouble *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect2DDouble, &sipCpp))
        {
            wxPoint2DDouble *sipRes;

            try
            {
            sipRes = new wxPoint2DDouble(sipCpp->GetLeftTop());
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromNewType(sipRes,sipType_wxPoint2DDouble,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_GetLeftTop, doc_wxRect2DDouble_GetLeftTop);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_SetLeftTop, "Rect2D.SetLeftTop(Point2D)");

extern "C" {static PyObject *meth_wxRect2DDouble_SetLeftTop(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_SetLeftTop(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxPoint2DDouble * pt;
        int ptState = 0;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect2DDouble, &sipCpp, sipType_wxPoint2DDouble, &pt, &ptState))
        {
            try
            {
            sipCpp->SetLeftTop(*pt);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_SetLeftTop, doc_wxRect2DDouble_SetLeftTop);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_MoveLeftTopTo, "Rect2D.MoveLeftTopTo(Point2D)");

extern "C" {static PyObject *meth_wxRect2DDouble_MoveLeftTopTo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_MoveLeftTopTo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxPoint2DDouble * pt;
        int ptState = 0;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect2DDouble, &sipCpp, sipType_wxPoint2DDouble, &pt, &ptState))
        {
            try
            {
            sipCpp->MoveLeftTopTo(*pt);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_MoveLeftTopTo, doc_wxRect2DDouble_MoveLeftTopTo);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_GetLeftBottom, "Rect2D.GetLeftBottom() -> Point2D");

extern "C" {static PyObject *meth_wxRect2DDouble_GetLeftBottom(PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_GetLeftBottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect2DDouble *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect2DDouble, &sipCpp))
        {
            wxPoint2DDouble *sipRes;

            try
            {
            sipRes = new wxPoint2DDouble(sipCpp->GetLeftBottom());
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromNewType(sipRes,sipType_wxPoint2DDouble,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_GetLeftBottom, doc_wxRect2DDouble_GetLeftBottom);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_SetLeftBottom, "Rect2D.SetLeftBottom(Point2D)");

extern "C" {static PyObject *meth_wxRect2DDouble_SetLeftBottom(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_SetLeftBottom(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxPoint2DDouble * pt;
        int ptState = 0;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect2DDouble, &sipCpp, sipType_wxPoint2DDouble, &pt, &ptState))
        {
            try
            {
            sipCpp->SetLeftBottom(*pt);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_SetLeftBottom, doc_wxRect2DDouble_SetLeftBottom);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_MoveLeftBottomTo, "Rect2D.MoveLeftBottomTo(Point2D)");

extern "C" {static PyObject *meth_wxRect2DDouble_MoveLeftBottomTo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_MoveLeftBottomTo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxPoint2DDouble * pt;
        int ptState = 0;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect2DDouble, &sipCpp, sipType_wxPoint2DDouble, &pt, &ptState))
        {
            try
            {
            sipCpp->MoveLeftBottomTo(*pt);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_MoveLeftBottomTo, doc_wxRect2DDouble_MoveLeftBottomTo);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_GetRightTop, "Rect2D.GetRightTop() -> Point2D");

extern "C" {static PyObject *meth_wxRect2DDouble_GetRightTop(PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_GetRightTop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect2DDouble *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect2DDouble, &sipCpp))
        {
            wxPoint2DDouble *sipRes;

            try
            {
            sipRes = new wxPoint2DDouble(sipCpp->GetRightTop());
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromNewType(sipRes,sipType_wxPoint2DDouble,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_GetRightTop, doc_wxRect2DDouble_GetRightTop);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_SetRightTop, "Rect2D.SetRightTop(Point2D)");

extern "C" {static PyObject *meth_wxRect2DDouble_SetRightTop(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_SetRightTop(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxPoint2DDouble * pt;
        int ptState = 0;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect2DDouble, &sipCpp, sipType_wxPoint2DDouble, &pt, &ptState))
        {
            try
            {
            sipCpp->SetRightTop(*pt);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_SetRightTop, doc_wxRect2DDouble_SetRightTop);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_MoveRightTopTo, "Rect2D.MoveRightTopTo(Point2D)");

extern "C" {static PyObject *meth_wxRect2DDouble_MoveRightTopTo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_MoveRightTopTo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxPoint2DDouble * pt;
        int ptState = 0;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect2DDouble, &sipCpp, sipType_wxPoint2DDouble, &pt, &ptState))
        {
            try
            {
            sipCpp->MoveRightTopTo(*pt);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_MoveRightTopTo, doc_wxRect2DDouble_MoveRightTopTo);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_GetRightBottom, "Rect2D.GetRightBottom() -> Point2D");

extern "C" {static PyObject *meth_wxRect2DDouble_GetRightBottom(PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_GetRightBottom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect2DDouble *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect2DDouble, &sipCpp))
        {
            wxPoint2DDouble *sipRes;

            try
            {
            sipRes = new wxPoint2DDouble(sipCpp->GetRightBottom());
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromNewType(sipRes,sipType_wxPoint2DDouble,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_GetRightBottom, doc_wxRect2DDouble_GetRightBottom);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_SetRightBottom, "Rect2D.SetRightBottom(Point2D)");

extern "C" {static PyObject *meth_wxRect2DDouble_SetRightBottom(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_SetRightBottom(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxPoint2DDouble * pt;
        int ptState = 0;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect2DDouble, &sipCpp, sipType_wxPoint2DDouble, &pt, &ptState))
        {
            try
            {
            sipCpp->SetRightBottom(*pt);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_SetRightBottom, doc_wxRect2DDouble_SetRightBottom);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_MoveRightBottomTo, "Rect2D.MoveRightBottomTo(Point2D)");

extern "C" {static PyObject *meth_wxRect2DDouble_MoveRightBottomTo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_MoveRightBottomTo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxPoint2DDouble * pt;
        int ptState = 0;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect2DDouble, &sipCpp, sipType_wxPoint2DDouble, &pt, &ptState))
        {
            try
            {
            sipCpp->MoveRightBottomTo(*pt);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_MoveRightBottomTo, doc_wxRect2DDouble_MoveRightBottomTo);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_GetCentre, "Rect2D.GetCentre() -> Point2D");

extern "C" {static PyObject *meth_wxRect2DDouble_GetCentre(PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_GetCentre(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect2DDouble *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect2DDouble, &sipCpp))
        {
            wxPoint2DDouble *sipRes;

            try
            {
            sipRes = new wxPoint2DDouble(sipCpp->GetCentre());
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromNewType(sipRes,sipType_wxPoint2DDouble,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_GetCentre, doc_wxRect2DDouble_GetCentre);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_SetCentre, "Rect2D.SetCentre(Point2D)");

extern "C" {static PyObject *meth_wxRect2DDouble_SetCentre(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_SetCentre(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxPoint2DDouble * pt;
        int ptState = 0;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect2DDouble, &sipCpp, sipType_wxPoint2DDouble, &pt, &ptState))
        {
            try
            {
            sipCpp->SetCentre(*pt);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_SetCentre, doc_wxRect2DDouble_SetCentre);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_MoveCentreTo, "Rect2D.MoveCentreTo(Point2D)");

extern "C" {static PyObject *meth_wxRect2DDouble_MoveCentreTo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_MoveCentreTo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxPoint2DDouble * pt;
        int ptState = 0;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect2DDouble, &sipCpp, sipType_wxPoint2DDouble, &pt, &ptState))
        {
            try
            {
            sipCpp->MoveCentreTo(*pt);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_MoveCentreTo, doc_wxRect2DDouble_MoveCentreTo);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_GetOutCode, "Rect2D.GetOutCode(Point2D) -> OutCode");

extern "C" {static PyObject *meth_wxRect2DDouble_GetOutCode(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_GetOutCode(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxPoint2DDouble * pt;
        int ptState = 0;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect2DDouble, &sipCpp, sipType_wxPoint2DDouble, &pt, &ptState))
        {
            wxOutCode sipRes;

            try
            {
            sipRes = sipCpp->GetOutCode(*pt);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);

            return sipConvertFromEnum(sipRes,sipType_wxOutCode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_GetOutCode, doc_wxRect2DDouble_GetOutCode);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_GetOutcode, "Rect2D.GetOutcode(Point2D) -> OutCode");

extern "C" {static PyObject *meth_wxRect2DDouble_GetOutcode(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_GetOutcode(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxPoint2DDouble * pt;
        int ptState = 0;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect2DDouble, &sipCpp, sipType_wxPoint2DDouble, &pt, &ptState))
        {
            wxOutCode sipRes;

            try
            {
            sipRes = sipCpp->GetOutcode(*pt);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);

            return sipConvertFromEnum(sipRes,sipType_wxOutCode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_GetOutcode, doc_wxRect2DDouble_GetOutcode);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_Contains, "Rect2D.Contains(Point2D) -> bool\n"
    "Rect2D.Contains(Rect2D) -> bool");

extern "C" {static PyObject *meth_wxRect2DDouble_Contains(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_Contains(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxPoint2DDouble * pt;
        int ptState = 0;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect2DDouble, &sipCpp, sipType_wxPoint2DDouble, &pt, &ptState))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->Contains(*pt);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const wxRect2DDouble * rect;
        int rectState = 0;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect2DDouble, &sipCpp, sipType_wxRect2DDouble, &rect, &rectState))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->Contains(*rect);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect2DDouble *>(rect),sipType_wxRect2DDouble,rectState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect2DDouble *>(rect),sipType_wxRect2DDouble,rectState);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_Contains, doc_wxRect2DDouble_Contains);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_IsEmpty, "Rect2D.IsEmpty() -> bool");

extern "C" {static PyObject *meth_wxRect2DDouble_IsEmpty(PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_IsEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect2DDouble *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect2DDouble, &sipCpp))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->IsEmpty();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_IsEmpty, doc_wxRect2DDouble_IsEmpty);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_HaveEqualSize, "Rect2D.HaveEqualSize(Rect2D) -> bool");

extern "C" {static PyObject *meth_wxRect2DDouble_HaveEqualSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_HaveEqualSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxRect2DDouble * rect;
        int rectState = 0;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect2DDouble, &sipCpp, sipType_wxRect2DDouble, &rect, &rectState))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->HaveEqualSize(*rect);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect2DDouble *>(rect),sipType_wxRect2DDouble,rectState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect2DDouble *>(rect),sipType_wxRect2DDouble,rectState);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_HaveEqualSize, doc_wxRect2DDouble_HaveEqualSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_Inset, "Rect2D.Inset(float, float)\n"
    "Rect2D.Inset(float, float, float, float)");

extern "C" {static PyObject *meth_wxRect2DDouble_Inset(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_Inset(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        wxDouble x;
        wxDouble y;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bdd", &sipSelf, sipType_wxRect2DDouble, &sipCpp, &x, &y))
        {
            try
            {
            sipCpp->Inset(x,y);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        wxDouble left;
        wxDouble top;
        wxDouble right;
        wxDouble bottom;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_left,
            sipName_top,
            sipName_right,
            sipName_bottom,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bdddd", &sipSelf, sipType_wxRect2DDouble, &sipCpp, &left, &top, &right, &bottom))
        {
            try
            {
            sipCpp->Inset(left,top,right,bottom);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_Inset, doc_wxRect2DDouble_Inset);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_Offset, "Rect2D.Offset(Point2D)");

extern "C" {static PyObject *meth_wxRect2DDouble_Offset(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_Offset(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxPoint2DDouble * pt;
        int ptState = 0;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect2DDouble, &sipCpp, sipType_wxPoint2DDouble, &pt, &ptState))
        {
            try
            {
            sipCpp->Offset(*pt);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_Offset, doc_wxRect2DDouble_Offset);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_ConstrainTo, "Rect2D.ConstrainTo(Rect2D)");

extern "C" {static PyObject *meth_wxRect2DDouble_ConstrainTo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_ConstrainTo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxRect2DDouble * rect;
        int rectState = 0;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect2DDouble, &sipCpp, sipType_wxRect2DDouble, &rect, &rectState))
        {
            try
            {
            sipCpp->ConstrainTo(*rect);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect2DDouble *>(rect),sipType_wxRect2DDouble,rectState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect2DDouble *>(rect),sipType_wxRect2DDouble,rectState);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_ConstrainTo, doc_wxRect2DDouble_ConstrainTo);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_Interpolate, "Rect2D.Interpolate(int, int) -> Point2D");

extern "C" {static PyObject *meth_wxRect2DDouble_Interpolate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_Interpolate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        wxInt32 widthfactor;
        wxInt32 heightfactor;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_widthfactor,
            sipName_heightfactor,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii", &sipSelf, sipType_wxRect2DDouble, &sipCpp, &widthfactor, &heightfactor))
        {
            wxPoint2DDouble *sipRes;

            try
            {
            sipRes = new wxPoint2DDouble(sipCpp->Interpolate(widthfactor,heightfactor));
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromNewType(sipRes,sipType_wxPoint2DDouble,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_Interpolate, doc_wxRect2DDouble_Interpolate);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_Intersect, "Rect2D.Intersect(Rect2D)\n"
    "Rect2D.Intersect(Rect2D, Rect2D, Rect2D)");

extern "C" {static PyObject *meth_wxRect2DDouble_Intersect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_Intersect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxRect2DDouble * otherRect;
        int otherRectState = 0;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_otherRect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect2DDouble, &sipCpp, sipType_wxRect2DDouble, &otherRect, &otherRectState))
        {
            try
            {
            sipCpp->Intersect(*otherRect);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect2DDouble *>(otherRect),sipType_wxRect2DDouble,otherRectState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect2DDouble *>(otherRect),sipType_wxRect2DDouble,otherRectState);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const wxRect2DDouble * src1;
        int src1State = 0;
        const wxRect2DDouble * src2;
        int src2State = 0;
        wxRect2DDouble * dest;
        int destState = 0;

        static const char *sipKwdList[] = {
            sipName_src1,
            sipName_src2,
            sipName_dest,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1J1J0", sipType_wxRect2DDouble, &src1, &src1State, sipType_wxRect2DDouble, &src2, &src2State, sipType_wxRect2DDouble, &dest, &destState))
        {
            try
            {
            wxRect2DDouble::Intersect(*src1,*src2,dest);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect2DDouble *>(src1),sipType_wxRect2DDouble,src1State);
            sipReleaseType(const_cast<wxRect2DDouble *>(src2),sipType_wxRect2DDouble,src2State);
            sipReleaseType(dest,sipType_wxRect2DDouble,destState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect2DDouble *>(src1),sipType_wxRect2DDouble,src1State);
            sipReleaseType(const_cast<wxRect2DDouble *>(src2),sipType_wxRect2DDouble,src2State);
            sipReleaseType(dest,sipType_wxRect2DDouble,destState);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_Intersect, doc_wxRect2DDouble_Intersect);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_CreateIntersection, "Rect2D.CreateIntersection(Rect2D) -> Rect2D");

extern "C" {static PyObject *meth_wxRect2DDouble_CreateIntersection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_CreateIntersection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxRect2DDouble * otherRect;
        int otherRectState = 0;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_otherRect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect2DDouble, &sipCpp, sipType_wxRect2DDouble, &otherRect, &otherRectState))
        {
            wxRect2DDouble *sipRes;

            try
            {
            sipRes = new wxRect2DDouble(sipCpp->CreateIntersection(*otherRect));
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect2DDouble *>(otherRect),sipType_wxRect2DDouble,otherRectState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect2DDouble *>(otherRect),sipType_wxRect2DDouble,otherRectState);

            return sipConvertFromNewType(sipRes,sipType_wxRect2DDouble,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_CreateIntersection, doc_wxRect2DDouble_CreateIntersection);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_Intersects, "Rect2D.Intersects(Rect2D) -> bool");

extern "C" {static PyObject *meth_wxRect2DDouble_Intersects(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_Intersects(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxRect2DDouble * rect;
        int rectState = 0;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect2DDouble, &sipCpp, sipType_wxRect2DDouble, &rect, &rectState))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->Intersects(*rect);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect2DDouble *>(rect),sipType_wxRect2DDouble,rectState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect2DDouble *>(rect),sipType_wxRect2DDouble,rectState);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_Intersects, doc_wxRect2DDouble_Intersects);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_Union, "Rect2D.Union(Rect2D)\n"
    "Rect2D.Union(Point2D)\n"
    "Rect2D.Union(Rect2D, Rect2D, Rect2D)");

extern "C" {static PyObject *meth_wxRect2DDouble_Union(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_Union(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxRect2DDouble * otherRect;
        int otherRectState = 0;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_otherRect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect2DDouble, &sipCpp, sipType_wxRect2DDouble, &otherRect, &otherRectState))
        {
            try
            {
            sipCpp->Union(*otherRect);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect2DDouble *>(otherRect),sipType_wxRect2DDouble,otherRectState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect2DDouble *>(otherRect),sipType_wxRect2DDouble,otherRectState);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const wxPoint2DDouble * pt;
        int ptState = 0;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect2DDouble, &sipCpp, sipType_wxPoint2DDouble, &pt, &ptState))
        {
            try
            {
            sipCpp->Union(*pt);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint2DDouble *>(pt),sipType_wxPoint2DDouble,ptState);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const wxRect2DDouble * src1;
        int src1State = 0;
        const wxRect2DDouble * src2;
        int src2State = 0;
        wxRect2DDouble * dest;
        int destState = 0;

        static const char *sipKwdList[] = {
            sipName_src1,
            sipName_src2,
            sipName_dest,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1J1J0", sipType_wxRect2DDouble, &src1, &src1State, sipType_wxRect2DDouble, &src2, &src2State, sipType_wxRect2DDouble, &dest, &destState))
        {
            try
            {
            wxRect2DDouble::Union(*src1,*src2,dest);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect2DDouble *>(src1),sipType_wxRect2DDouble,src1State);
            sipReleaseType(const_cast<wxRect2DDouble *>(src2),sipType_wxRect2DDouble,src2State);
            sipReleaseType(dest,sipType_wxRect2DDouble,destState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect2DDouble *>(src1),sipType_wxRect2DDouble,src1State);
            sipReleaseType(const_cast<wxRect2DDouble *>(src2),sipType_wxRect2DDouble,src2State);
            sipReleaseType(dest,sipType_wxRect2DDouble,destState);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_Union, doc_wxRect2DDouble_Union);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_CreateUnion, "Rect2D.CreateUnion(Rect2D) -> Rect2D");

extern "C" {static PyObject *meth_wxRect2DDouble_CreateUnion(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_CreateUnion(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxRect2DDouble * otherRect;
        int otherRectState = 0;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_otherRect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRect2DDouble, &sipCpp, sipType_wxRect2DDouble, &otherRect, &otherRectState))
        {
            wxRect2DDouble *sipRes;

            try
            {
            sipRes = new wxRect2DDouble(sipCpp->CreateUnion(*otherRect));
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect2DDouble *>(otherRect),sipType_wxRect2DDouble,otherRectState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect2DDouble *>(otherRect),sipType_wxRect2DDouble,otherRectState);

            return sipConvertFromNewType(sipRes,sipType_wxRect2DDouble,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_CreateUnion, doc_wxRect2DDouble_CreateUnion);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_Scale, "Rect2D.Scale(float)\n"
    "Rect2D.Scale(int, int)");

extern "C" {static PyObject *meth_wxRect2DDouble_Scale(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_Scale(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        wxDouble f;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_f,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bd", &sipSelf, sipType_wxRect2DDouble, &sipCpp, &f))
        {
            try
            {
            sipCpp->Scale(f);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        wxInt32 num;
        wxInt32 denum;
        wxRect2DDouble *sipCpp;

        static const char *sipKwdList[] = {
            sipName_num,
            sipName_denum,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii", &sipSelf, sipType_wxRect2DDouble, &sipCpp, &num, &denum))
        {
            try
            {
            sipCpp->Scale(num,denum);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_Scale, doc_wxRect2DDouble_Scale);

    return NULL;
}


PyDoc_STRVAR(doc_wxRect2DDouble_Get, "Rect2D.Get() -> object");

extern "C" {static PyObject *meth_wxRect2DDouble_Get(PyObject *, PyObject *);}
static PyObject *meth_wxRect2DDouble_Get(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxRect2DDouble *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRect2DDouble, &sipCpp))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 429 "sip/gen/geometry.sip"
        sipRes = sipBuildResult(&sipIsErr, "(dddd)", 
                                sipCpp->m_x, sipCpp->m_y, sipCpp->m_width, sipCpp->m_height);
#line 2026 "sip_corewxRect2DDouble.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Rect2D, sipName_Get, doc_wxRect2DDouble_Get);

    return NULL;
}


extern "C" {static PyObject *slot_wxRect2DDouble___ne__(PyObject *,PyObject *);}
static PyObject *slot_wxRect2DDouble___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    wxRect2DDouble *sipCpp = reinterpret_cast<wxRect2DDouble *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxRect2DDouble));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const wxRect2DDouble * rect;
        int rectState = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_wxRect2DDouble, &rect, &rectState))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->wxRect2DDouble::operator!=(*rect);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect2DDouble *>(rect),sipType_wxRect2DDouble,rectState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect2DDouble *>(rect),sipType_wxRect2DDouble,rectState);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__core,ne_slot,sipType_wxRect2DDouble,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_wxRect2DDouble___eq__(PyObject *,PyObject *);}
static PyObject *slot_wxRect2DDouble___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    wxRect2DDouble *sipCpp = reinterpret_cast<wxRect2DDouble *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxRect2DDouble));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const wxRect2DDouble * rect;
        int rectState = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_wxRect2DDouble, &rect, &rectState))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->wxRect2DDouble::operator==(*rect);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect2DDouble *>(rect),sipType_wxRect2DDouble,rectState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect2DDouble *>(rect),sipType_wxRect2DDouble,rectState);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__core,eq_slot,sipType_wxRect2DDouble,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_wxRect2DDouble(void *, const sipTypeDef *);}
static void *cast_wxRect2DDouble(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_wxRect2DDouble)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxRect2DDouble(void *, int);}
static void release_wxRect2DDouble(void *sipCppV,int)
{
    delete reinterpret_cast<wxRect2DDouble *>(sipCppV);
}


extern "C" {static void assign_wxRect2DDouble(void *, SIP_SSIZE_T, const void *);}
static void assign_wxRect2DDouble(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<wxRect2DDouble *>(sipDst)[sipDstIdx] = *reinterpret_cast<const wxRect2DDouble *>(sipSrc);
}


extern "C" {static void *array_wxRect2DDouble(SIP_SSIZE_T);}
static void *array_wxRect2DDouble(SIP_SSIZE_T sipNrElem)
{
    return new wxRect2DDouble[sipNrElem];
}


extern "C" {static void *copy_wxRect2DDouble(const void *, SIP_SSIZE_T);}
static void *copy_wxRect2DDouble(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new wxRect2DDouble(reinterpret_cast<const wxRect2DDouble *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxRect2DDouble(sipSimpleWrapper *);}
static void dealloc_wxRect2DDouble(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_wxRect2DDouble(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_wxRect2DDouble(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_wxRect2DDouble(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    wxRect2DDouble *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            try
            {
            sipCpp = new wxRect2DDouble();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipCpp;
        }
    }

    {
        wxDouble x;
        wxDouble y;
        wxDouble w;
        wxDouble h;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_w,
            sipName_h,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "dddd", &x, &y, &w, &h))
        {
            try
            {
            sipCpp = new wxRect2DDouble(x,y,w,h);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipCpp;
        }
    }

    {
        const wxRect2DDouble * a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_wxRect2DDouble, &a0, &a0State))
        {
            try
            {
            sipCpp = new wxRect2DDouble(*a0);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRect2DDouble *>(a0),sipType_wxRect2DDouble,a0State);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRect2DDouble *>(a0),sipType_wxRect2DDouble,a0State);

            return sipCpp;
        }
    }

    return NULL;
}


extern "C" {static int convertTo_wxRect2DDouble(PyObject *, void **, int *, PyObject *);}
static int convertTo_wxRect2DDouble(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    wxRect2DDouble **sipCppPtr = reinterpret_cast<wxRect2DDouble **>(sipCppPtrV);

#line 434 "sip/gen/geometry.sip"
        // is it just a typecheck?
        if (!sipIsErr) {
            if (sipCanConvertToType(sipPy, sipType_wxRect2DDouble, SIP_NO_CONVERTORS))
                return 1;
        
            if (PySequence_Check(sipPy) && PySequence_Size(sipPy) == 4) {
                int rval = 1;
                PyObject* o1 = PySequence_ITEM(sipPy, 0);
                PyObject* o2 = PySequence_ITEM(sipPy, 1);
                PyObject* o3 = PySequence_ITEM(sipPy, 2);
                PyObject* o4 = PySequence_ITEM(sipPy, 3);
                if (!PyNumber_Check(o1) || !PyNumber_Check(o2) || !PyNumber_Check(o3) || !PyNumber_Check(o4)) 
                    rval = 0;
                Py_DECREF(o1);
                Py_DECREF(o2);
                Py_DECREF(o3);
                Py_DECREF(o4);
                return rval;
            }
            return 0;
        }   
        
        // otherwise do the conversion
        if (PySequence_Check(sipPy)) {
            PyObject* o1 = PySequence_ITEM(sipPy, 0);
            PyObject* o2 = PySequence_ITEM(sipPy, 1);
            PyObject* o3 = PySequence_ITEM(sipPy, 2);
            PyObject* o4 = PySequence_ITEM(sipPy, 3);       
            *sipCppPtr = new wxRect2DDouble(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2),
                                     PyFloat_AsDouble(o3), PyFloat_AsDouble(o4));
            Py_DECREF(o1);
            Py_DECREF(o2);
            return sipGetState(sipTransferObj);
         }    
         *sipCppPtr = reinterpret_cast<wxRect2DDouble*>(sipConvertToType(
                     sipPy, sipType_wxRect2DDouble, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));
         return 0;
#line 2298 "sip_corewxRect2DDouble.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_wxRect2DDouble[] = {
    {(void *)slot_wxRect2DDouble___ne__, ne_slot},
    {(void *)slot_wxRect2DDouble___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_wxRect2DDouble[] = {
    {SIP_MLNAME_CAST(sipName_ConstrainTo), (PyCFunction)meth_wxRect2DDouble_ConstrainTo, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_ConstrainTo)},
    {SIP_MLNAME_CAST(sipName_Contains), (PyCFunction)meth_wxRect2DDouble_Contains, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_Contains)},
    {SIP_MLNAME_CAST(sipName_CreateIntersection), (PyCFunction)meth_wxRect2DDouble_CreateIntersection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_CreateIntersection)},
    {SIP_MLNAME_CAST(sipName_CreateUnion), (PyCFunction)meth_wxRect2DDouble_CreateUnion, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_CreateUnion)},
    {SIP_MLNAME_CAST(sipName_Get), meth_wxRect2DDouble_Get, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect2DDouble_Get)},
    {SIP_MLNAME_CAST(sipName_GetBottom), meth_wxRect2DDouble_GetBottom, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect2DDouble_GetBottom)},
    {SIP_MLNAME_CAST(sipName_GetCentre), meth_wxRect2DDouble_GetCentre, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect2DDouble_GetCentre)},
    {SIP_MLNAME_CAST(sipName_GetLeft), meth_wxRect2DDouble_GetLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect2DDouble_GetLeft)},
    {SIP_MLNAME_CAST(sipName_GetLeftBottom), meth_wxRect2DDouble_GetLeftBottom, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect2DDouble_GetLeftBottom)},
    {SIP_MLNAME_CAST(sipName_GetLeftTop), meth_wxRect2DDouble_GetLeftTop, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect2DDouble_GetLeftTop)},
    {SIP_MLNAME_CAST(sipName_GetOutCode), (PyCFunction)meth_wxRect2DDouble_GetOutCode, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_GetOutCode)},
    {SIP_MLNAME_CAST(sipName_GetOutcode), (PyCFunction)meth_wxRect2DDouble_GetOutcode, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_GetOutcode)},
    {SIP_MLNAME_CAST(sipName_GetPosition), meth_wxRect2DDouble_GetPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect2DDouble_GetPosition)},
    {SIP_MLNAME_CAST(sipName_GetRight), meth_wxRect2DDouble_GetRight, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect2DDouble_GetRight)},
    {SIP_MLNAME_CAST(sipName_GetRightBottom), meth_wxRect2DDouble_GetRightBottom, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect2DDouble_GetRightBottom)},
    {SIP_MLNAME_CAST(sipName_GetRightTop), meth_wxRect2DDouble_GetRightTop, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect2DDouble_GetRightTop)},
    {SIP_MLNAME_CAST(sipName_GetSize), meth_wxRect2DDouble_GetSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect2DDouble_GetSize)},
    {SIP_MLNAME_CAST(sipName_GetTop), meth_wxRect2DDouble_GetTop, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect2DDouble_GetTop)},
    {SIP_MLNAME_CAST(sipName_HaveEqualSize), (PyCFunction)meth_wxRect2DDouble_HaveEqualSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_HaveEqualSize)},
    {SIP_MLNAME_CAST(sipName_Inset), (PyCFunction)meth_wxRect2DDouble_Inset, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_Inset)},
    {SIP_MLNAME_CAST(sipName_Interpolate), (PyCFunction)meth_wxRect2DDouble_Interpolate, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_Interpolate)},
    {SIP_MLNAME_CAST(sipName_Intersect), (PyCFunction)meth_wxRect2DDouble_Intersect, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_Intersect)},
    {SIP_MLNAME_CAST(sipName_Intersects), (PyCFunction)meth_wxRect2DDouble_Intersects, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_Intersects)},
    {SIP_MLNAME_CAST(sipName_IsEmpty), meth_wxRect2DDouble_IsEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRect2DDouble_IsEmpty)},
    {SIP_MLNAME_CAST(sipName_MoveBottomTo), (PyCFunction)meth_wxRect2DDouble_MoveBottomTo, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_MoveBottomTo)},
    {SIP_MLNAME_CAST(sipName_MoveCentreTo), (PyCFunction)meth_wxRect2DDouble_MoveCentreTo, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_MoveCentreTo)},
    {SIP_MLNAME_CAST(sipName_MoveLeftBottomTo), (PyCFunction)meth_wxRect2DDouble_MoveLeftBottomTo, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_MoveLeftBottomTo)},
    {SIP_MLNAME_CAST(sipName_MoveLeftTo), (PyCFunction)meth_wxRect2DDouble_MoveLeftTo, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_MoveLeftTo)},
    {SIP_MLNAME_CAST(sipName_MoveLeftTopTo), (PyCFunction)meth_wxRect2DDouble_MoveLeftTopTo, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_MoveLeftTopTo)},
    {SIP_MLNAME_CAST(sipName_MoveRightBottomTo), (PyCFunction)meth_wxRect2DDouble_MoveRightBottomTo, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_MoveRightBottomTo)},
    {SIP_MLNAME_CAST(sipName_MoveRightTo), (PyCFunction)meth_wxRect2DDouble_MoveRightTo, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_MoveRightTo)},
    {SIP_MLNAME_CAST(sipName_MoveRightTopTo), (PyCFunction)meth_wxRect2DDouble_MoveRightTopTo, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_MoveRightTopTo)},
    {SIP_MLNAME_CAST(sipName_MoveTopTo), (PyCFunction)meth_wxRect2DDouble_MoveTopTo, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_MoveTopTo)},
    {SIP_MLNAME_CAST(sipName_Offset), (PyCFunction)meth_wxRect2DDouble_Offset, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_Offset)},
    {SIP_MLNAME_CAST(sipName_Scale), (PyCFunction)meth_wxRect2DDouble_Scale, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_Scale)},
    {SIP_MLNAME_CAST(sipName_SetBottom), (PyCFunction)meth_wxRect2DDouble_SetBottom, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_SetBottom)},
    {SIP_MLNAME_CAST(sipName_SetCentre), (PyCFunction)meth_wxRect2DDouble_SetCentre, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_SetCentre)},
    {SIP_MLNAME_CAST(sipName_SetLeft), (PyCFunction)meth_wxRect2DDouble_SetLeft, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_SetLeft)},
    {SIP_MLNAME_CAST(sipName_SetLeftBottom), (PyCFunction)meth_wxRect2DDouble_SetLeftBottom, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_SetLeftBottom)},
    {SIP_MLNAME_CAST(sipName_SetLeftTop), (PyCFunction)meth_wxRect2DDouble_SetLeftTop, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_SetLeftTop)},
    {SIP_MLNAME_CAST(sipName_SetRight), (PyCFunction)meth_wxRect2DDouble_SetRight, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_SetRight)},
    {SIP_MLNAME_CAST(sipName_SetRightBottom), (PyCFunction)meth_wxRect2DDouble_SetRightBottom, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_SetRightBottom)},
    {SIP_MLNAME_CAST(sipName_SetRightTop), (PyCFunction)meth_wxRect2DDouble_SetRightTop, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_SetRightTop)},
    {SIP_MLNAME_CAST(sipName_SetTop), (PyCFunction)meth_wxRect2DDouble_SetTop, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_SetTop)},
    {SIP_MLNAME_CAST(sipName_Union), (PyCFunction)meth_wxRect2DDouble_Union, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRect2DDouble_Union)}
};


extern "C" {static PyObject *varget_wxRect2DDouble_m_height(void *, PyObject *);}
static PyObject *varget_wxRect2DDouble_m_height(void *sipSelf, PyObject *)
{
    wxDouble sipVal;
    wxRect2DDouble *sipCpp = reinterpret_cast<wxRect2DDouble *>(sipSelf);

    sipVal = sipCpp->m_height;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_wxRect2DDouble_m_height(void *, PyObject *, PyObject *);}
static int varset_wxRect2DDouble_m_height(void *sipSelf, PyObject *sipPy, PyObject *)
{
    wxDouble sipVal;
    wxRect2DDouble *sipCpp = reinterpret_cast<wxRect2DDouble *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->m_height = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_wxRect2DDouble_m_width(void *, PyObject *);}
static PyObject *varget_wxRect2DDouble_m_width(void *sipSelf, PyObject *)
{
    wxDouble sipVal;
    wxRect2DDouble *sipCpp = reinterpret_cast<wxRect2DDouble *>(sipSelf);

    sipVal = sipCpp->m_width;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_wxRect2DDouble_m_width(void *, PyObject *, PyObject *);}
static int varset_wxRect2DDouble_m_width(void *sipSelf, PyObject *sipPy, PyObject *)
{
    wxDouble sipVal;
    wxRect2DDouble *sipCpp = reinterpret_cast<wxRect2DDouble *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->m_width = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_wxRect2DDouble_m_x(void *, PyObject *);}
static PyObject *varget_wxRect2DDouble_m_x(void *sipSelf, PyObject *)
{
    wxDouble sipVal;
    wxRect2DDouble *sipCpp = reinterpret_cast<wxRect2DDouble *>(sipSelf);

    sipVal = sipCpp->m_x;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_wxRect2DDouble_m_x(void *, PyObject *, PyObject *);}
static int varset_wxRect2DDouble_m_x(void *sipSelf, PyObject *sipPy, PyObject *)
{
    wxDouble sipVal;
    wxRect2DDouble *sipCpp = reinterpret_cast<wxRect2DDouble *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->m_x = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_wxRect2DDouble_m_y(void *, PyObject *);}
static PyObject *varget_wxRect2DDouble_m_y(void *sipSelf, PyObject *)
{
    wxDouble sipVal;
    wxRect2DDouble *sipCpp = reinterpret_cast<wxRect2DDouble *>(sipSelf);

    sipVal = sipCpp->m_y;

    return PyFloat_FromDouble(sipVal);
}


extern "C" {static int varset_wxRect2DDouble_m_y(void *, PyObject *, PyObject *);}
static int varset_wxRect2DDouble_m_y(void *sipSelf, PyObject *sipPy, PyObject *)
{
    wxDouble sipVal;
    wxRect2DDouble *sipCpp = reinterpret_cast<wxRect2DDouble *>(sipSelf);

    sipVal = PyFloat_AsDouble(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->m_y = sipVal;

    return 0;
}

sipVariableDef variables_wxRect2DDouble[] = {
    {InstanceVariable, sipName_height, (PyMethodDef *)varget_wxRect2DDouble_m_height, (PyMethodDef *)varset_wxRect2DDouble_m_height, NULL, NULL},
    {InstanceVariable, sipName_width, (PyMethodDef *)varget_wxRect2DDouble_m_width, (PyMethodDef *)varset_wxRect2DDouble_m_width, NULL, NULL},
    {InstanceVariable, sipName_x, (PyMethodDef *)varget_wxRect2DDouble_m_x, (PyMethodDef *)varset_wxRect2DDouble_m_x, NULL, NULL},
    {InstanceVariable, sipName_y, (PyMethodDef *)varget_wxRect2DDouble_m_y, (PyMethodDef *)varset_wxRect2DDouble_m_y, NULL, NULL},
};

PyDoc_STRVAR(doc_wxRect2DDouble, "\1Rect2D()\n"
    "Rect2D(float, float, float, float)\n"
    "Rect2D(Rect2D)");


sipClassTypeDef sipTypeDef__core_wxRect2DDouble = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_wxRect2DDouble,
        {0}
    },
    {
        sipNameNr_Rect2D,
        {0, 0, 1},
        45, methods_wxRect2DDouble,
        0, 0,
        4, variables_wxRect2DDouble,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxRect2DDouble,
    -1,
    -1,
    0,
    slots_wxRect2DDouble,
    init_wxRect2DDouble,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxRect2DDouble,
    assign_wxRect2DDouble,
    array_wxRect2DDouble,
    copy_wxRect2DDouble,
    release_wxRect2DDouble,
    cast_wxRect2DDouble,
    convertTo_wxRect2DDouble,
    0,
    0
};
