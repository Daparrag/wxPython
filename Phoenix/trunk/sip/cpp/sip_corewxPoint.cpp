/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.12-snapshot-93040d2c716c
 *
 *     Copyright: (c) 2010 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

#line 23 "sip/gen/gdicmn.sip"
    #include <wx/gdicmn.h>
#line 15 "sip_corewxPoint.cpp"

#line 680 "sip/gen/gdicmn.sip"
    #include <wx/gdicmn.h>
#line 19 "sip_corewxPoint.cpp"
#line 177 "sip/gen/gdicmn.sip"
    #include <wx/gdicmn.h>
#line 22 "sip_corewxPoint.cpp"


PyDoc_STRVAR(doc_wxPoint_IsFullySpecified, "Point.IsFullySpecified() -> bool");

extern "C" {static PyObject *meth_wxPoint_IsFullySpecified(PyObject *, PyObject *);}
static PyObject *meth_wxPoint_IsFullySpecified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPoint, &sipCpp))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->IsFullySpecified();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Point, sipName_IsFullySpecified, doc_wxPoint_IsFullySpecified);

    return NULL;
}


PyDoc_STRVAR(doc_wxPoint_SetDefaults, "Point.SetDefaults(Point)");

extern "C" {static PyObject *meth_wxPoint_SetDefaults(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPoint_SetDefaults(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const wxPoint * pt;
        int ptState = 0;
        wxPoint *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxPoint, &sipCpp, sipType_wxPoint, &pt, &ptState))
        {
            try
            {
            sipCpp->SetDefaults(*pt);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint *>(pt),sipType_wxPoint,ptState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint *>(pt),sipType_wxPoint,ptState);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Point, sipName_SetDefaults, doc_wxPoint_SetDefaults);

    return NULL;
}


PyDoc_STRVAR(doc_wxPoint_Get, "Point.Get() -> object");

extern "C" {static PyObject *meth_wxPoint_Get(PyObject *, PyObject *);}
static PyObject *meth_wxPoint_Get(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxPoint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPoint, &sipCpp))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 66 "sip/gen/gdicmn.sip"
        sipRes = sipBuildResult(&sipIsErr, "(ii)", sipCpp->x, sipCpp->y);
#line 122 "sip_corewxPoint.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Point, sipName_Get, doc_wxPoint_Get);

    return NULL;
}


extern "C" {static PyObject *slot_wxPoint___eq__(PyObject *,PyObject *);}
static PyObject *slot_wxPoint___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    wxPoint *sipCpp = reinterpret_cast<wxPoint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxPoint));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const wxPoint * p2;
        int p2State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_wxPoint, &p2, &p2State))
        {
            bool sipRes;

            try
            {
            sipRes = operator==((*sipCpp), *p2);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint *>(p2),sipType_wxPoint,p2State);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint *>(p2),sipType_wxPoint,p2State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__core,eq_slot,sipType_wxPoint,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_wxPoint___ne__(PyObject *,PyObject *);}
static PyObject *slot_wxPoint___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    wxPoint *sipCpp = reinterpret_cast<wxPoint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxPoint));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const wxPoint * p2;
        int p2State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_wxPoint, &p2, &p2State))
        {
            bool sipRes;

            try
            {
            sipRes = operator!=((*sipCpp), *p2);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint *>(p2),sipType_wxPoint,p2State);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint *>(p2),sipType_wxPoint,p2State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__core,ne_slot,sipType_wxPoint,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_wxPoint___add__(PyObject *,PyObject *);}
static PyObject *slot_wxPoint___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const wxPoint * p;
        int pState = 0;
        const wxSize * s;
        int sState = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1J1", sipType_wxPoint, &p, &pState, sipType_wxSize, &s, &sState))
        {
            wxPoint *sipRes;

            try
            {
            sipRes = new wxPoint((*p + *s));
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint *>(p),sipType_wxPoint,pState);
            sipReleaseType(const_cast<wxSize *>(s),sipType_wxSize,sState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint *>(p),sipType_wxPoint,pState);
            sipReleaseType(const_cast<wxSize *>(s),sipType_wxSize,sState);

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    {
        const wxPoint * p1;
        int p1State = 0;
        const wxPoint * p2;
        int p2State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1J1", sipType_wxPoint, &p1, &p1State, sipType_wxPoint, &p2, &p2State))
        {
            wxPoint *sipRes;

            try
            {
            sipRes = new wxPoint((*p1 + *p2));
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint *>(p1),sipType_wxPoint,p1State);
            sipReleaseType(const_cast<wxPoint *>(p2),sipType_wxPoint,p2State);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint *>(p1),sipType_wxPoint,p1State);
            sipReleaseType(const_cast<wxPoint *>(p2),sipType_wxPoint,p2State);

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__core,add_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_wxPoint___neg__(PyObject *);}
static PyObject *slot_wxPoint___neg__(PyObject *sipSelf)
{
    wxPoint *sipCpp = reinterpret_cast<wxPoint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxPoint));

    if (!sipCpp)
        return 0;


    {
        {
            wxPoint *sipRes;

            try
            {
            sipRes = new wxPoint(-(*sipCpp));
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }
}


extern "C" {static PyObject *slot_wxPoint___sub__(PyObject *,PyObject *);}
static PyObject *slot_wxPoint___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const wxPoint * p;
        int pState = 0;
        const wxSize * s;
        int sState = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1J1", sipType_wxPoint, &p, &pState, sipType_wxSize, &s, &sState))
        {
            wxPoint *sipRes;

            try
            {
            sipRes = new wxPoint((*p - *s));
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint *>(p),sipType_wxPoint,pState);
            sipReleaseType(const_cast<wxSize *>(s),sipType_wxSize,sState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint *>(p),sipType_wxPoint,pState);
            sipReleaseType(const_cast<wxSize *>(s),sipType_wxSize,sState);

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    {
        const wxPoint * p1;
        int p1State = 0;
        const wxPoint * p2;
        int p2State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1J1", sipType_wxPoint, &p1, &p1State, sipType_wxPoint, &p2, &p2State))
        {
            wxPoint *sipRes;

            try
            {
            sipRes = new wxPoint((*p1 - *p2));
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint *>(p1),sipType_wxPoint,p1State);
            sipReleaseType(const_cast<wxPoint *>(p2),sipType_wxPoint,p2State);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint *>(p1),sipType_wxPoint,p1State);
            sipReleaseType(const_cast<wxPoint *>(p2),sipType_wxPoint,p2State);

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__core,sub_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_wxPoint___mul__(PyObject *,PyObject *);}
static PyObject *slot_wxPoint___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const wxPoint * s;
        int sState = 0;
        int i;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_wxPoint, &s, &sState, &i))
        {
            wxPoint *sipRes;

            try
            {
            sipRes = new wxPoint((*s * i));
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint *>(s),sipType_wxPoint,sState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint *>(s),sipType_wxPoint,sState);

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    {
        int i;
        const wxPoint * s;
        int sState = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "iJ1", &i, sipType_wxPoint, &s, &sState))
        {
            wxPoint *sipRes;

            try
            {
            sipRes = new wxPoint((i * *s));
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint *>(s),sipType_wxPoint,sState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint *>(s),sipType_wxPoint,sState);

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__core,mul_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_wxPoint___div__(PyObject *,PyObject *);}
static PyObject *slot_wxPoint___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const wxPoint * s;
        int sState = 0;
        int i;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_wxPoint, &s, &sState, &i))
        {
            wxPoint *sipRes;

            try
            {
            sipRes = new wxPoint((*s / i));
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint *>(s),sipType_wxPoint,sState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint *>(s),sipType_wxPoint,sState);

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__core,div_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_wxPoint___isub__(PyObject *,PyObject *);}
static PyObject *slot_wxPoint___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_wxPoint)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    wxPoint *sipCpp = reinterpret_cast<wxPoint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxPoint));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const wxPoint * pt;
        int ptState = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_wxPoint, &pt, &ptState))
        {
            try
            {
            sipCpp->wxPoint::operator-=(*pt);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint *>(pt),sipType_wxPoint,ptState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint *>(pt),sipType_wxPoint,ptState);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const wxSize * sz;
        int szState = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_wxSize, &sz, &szState))
        {
            try
            {
            sipCpp->wxPoint::operator-=(*sz);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxSize *>(sz),sipType_wxSize,szState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxSize *>(sz),sipType_wxSize,szState);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_wxPoint___iadd__(PyObject *,PyObject *);}
static PyObject *slot_wxPoint___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_wxPoint)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    wxPoint *sipCpp = reinterpret_cast<wxPoint *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxPoint));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const wxPoint * pt;
        int ptState = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_wxPoint, &pt, &ptState))
        {
            try
            {
            sipCpp->wxPoint::operator+=(*pt);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint *>(pt),sipType_wxPoint,ptState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint *>(pt),sipType_wxPoint,ptState);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const wxSize * sz;
        int szState = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_wxSize, &sz, &szState))
        {
            try
            {
            sipCpp->wxPoint::operator+=(*sz);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxSize *>(sz),sipType_wxSize,szState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxSize *>(sz),sipType_wxSize,szState);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_wxPoint(void *, const sipTypeDef *);}
static void *cast_wxPoint(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_wxPoint)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxPoint(void *, int);}
static void release_wxPoint(void *sipCppV,int)
{
    delete reinterpret_cast<wxPoint *>(sipCppV);
}


extern "C" {static void assign_wxPoint(void *, SIP_SSIZE_T, const void *);}
static void assign_wxPoint(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<wxPoint *>(sipDst)[sipDstIdx] = *reinterpret_cast<const wxPoint *>(sipSrc);
}


extern "C" {static void *array_wxPoint(SIP_SSIZE_T);}
static void *array_wxPoint(SIP_SSIZE_T sipNrElem)
{
    return new wxPoint[sipNrElem];
}


extern "C" {static void *copy_wxPoint(const void *, SIP_SSIZE_T);}
static void *copy_wxPoint(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new wxPoint(reinterpret_cast<const wxPoint *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxPoint(sipSimpleWrapper *);}
static void dealloc_wxPoint(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_wxPoint(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_wxPoint(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_wxPoint(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    wxPoint *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            try
            {
            sipCpp = new wxPoint();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipCpp;
        }
    }

    {
        int x;
        int y;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "ii", &x, &y))
        {
            try
            {
            sipCpp = new wxPoint(x,y);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipCpp;
        }
    }

    {
        const wxRealPoint * pt;
        int ptState = 0;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1", sipType_wxRealPoint, &pt, &ptState))
        {
            try
            {
            sipCpp = new wxPoint(*pt);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxRealPoint *>(pt),sipType_wxRealPoint,ptState);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxRealPoint *>(pt),sipType_wxRealPoint,ptState);

            return sipCpp;
        }
    }

    {
        const wxPoint * a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_wxPoint, &a0, &a0State))
        {
            try
            {
            sipCpp = new wxPoint(*a0);
            }
            catch (...)
            {
            sipReleaseType(const_cast<wxPoint *>(a0),sipType_wxPoint,a0State);
                sipRaiseUnknownException();
                return NULL;
            }
            sipReleaseType(const_cast<wxPoint *>(a0),sipType_wxPoint,a0State);

            return sipCpp;
        }
    }

    return NULL;
}


extern "C" {static int convertTo_wxPoint(PyObject *, void **, int *, PyObject *);}
static int convertTo_wxPoint(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    wxPoint **sipCppPtr = reinterpret_cast<wxPoint **>(sipCppPtrV);

#line 70 "sip/gen/gdicmn.sip"
        // is it just a typecheck?
        if (!sipIsErr) {
            if (sipCanConvertToType(sipPy, sipType_wxPoint, SIP_NO_CONVERTORS))
                return 1;
        
            if (PySequence_Check(sipPy) && PySequence_Size(sipPy) == 2) {
                int rval = 1;
                PyObject* o1 = PySequence_ITEM(sipPy, 0);
                PyObject* o2 = PySequence_ITEM(sipPy, 1);
                if (!PyNumber_Check(o1) || !PyNumber_Check(o2)) 
                    rval = 0;
                Py_DECREF(o1);
                Py_DECREF(o2);
                return rval;
            }
            return 0;
        }   
        
        // otherwise do the conversion
        if (PySequence_Check(sipPy)) {
            PyObject* o1 = PySequence_ITEM(sipPy, 0);
            PyObject* o2 = PySequence_ITEM(sipPy, 1);
            *sipCppPtr = new wxPoint(PyInt_AsLong(o1), PyInt_AsLong(o2));
            Py_DECREF(o1);
            Py_DECREF(o2);
            return sipGetState(sipTransferObj);
         }    
         *sipCppPtr = reinterpret_cast<wxPoint*>(sipConvertToType(
                     sipPy, sipType_wxPoint, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));
         return 0;
#line 829 "sip_corewxPoint.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_wxPoint[] = {
    {(void *)slot_wxPoint___eq__, eq_slot},
    {(void *)slot_wxPoint___ne__, ne_slot},
    {(void *)slot_wxPoint___add__, add_slot},
    {(void *)slot_wxPoint___neg__, neg_slot},
    {(void *)slot_wxPoint___sub__, sub_slot},
    {(void *)slot_wxPoint___mul__, mul_slot},
    {(void *)slot_wxPoint___div__, div_slot},
    {(void *)slot_wxPoint___isub__, isub_slot},
    {(void *)slot_wxPoint___iadd__, iadd_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_wxPoint[] = {
    {SIP_MLNAME_CAST(sipName_Get), meth_wxPoint_Get, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPoint_Get)},
    {SIP_MLNAME_CAST(sipName_IsFullySpecified), meth_wxPoint_IsFullySpecified, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPoint_IsFullySpecified)},
    {SIP_MLNAME_CAST(sipName_SetDefaults), (PyCFunction)meth_wxPoint_SetDefaults, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPoint_SetDefaults)}
};


extern "C" {static PyObject *varget_wxPoint_x(void *, PyObject *);}
static PyObject *varget_wxPoint_x(void *sipSelf, PyObject *)
{
    int sipVal;
    wxPoint *sipCpp = reinterpret_cast<wxPoint *>(sipSelf);

    sipVal = sipCpp->x;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_wxPoint_x(void *, PyObject *, PyObject *);}
static int varset_wxPoint_x(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
    wxPoint *sipCpp = reinterpret_cast<wxPoint *>(sipSelf);

    sipVal = (int)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->x = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_wxPoint_y(void *, PyObject *);}
static PyObject *varget_wxPoint_y(void *sipSelf, PyObject *)
{
    int sipVal;
    wxPoint *sipCpp = reinterpret_cast<wxPoint *>(sipSelf);

    sipVal = sipCpp->y;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_wxPoint_y(void *, PyObject *, PyObject *);}
static int varset_wxPoint_y(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
    wxPoint *sipCpp = reinterpret_cast<wxPoint *>(sipSelf);

    sipVal = (int)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->y = sipVal;

    return 0;
}

sipVariableDef variables_wxPoint[] = {
    {InstanceVariable, sipName_x, (PyMethodDef *)varget_wxPoint_x, (PyMethodDef *)varset_wxPoint_x, NULL, NULL},
    {InstanceVariable, sipName_y, (PyMethodDef *)varget_wxPoint_y, (PyMethodDef *)varset_wxPoint_y, NULL, NULL},
};

PyDoc_STRVAR(doc_wxPoint, "\1Point()\n"
    "Point(int, int)\n"
    "Point(RealPoint)\n"
    "Point(Point)");


sipClassTypeDef sipTypeDef__core_wxPoint = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_wxPoint,
        {0}
    },
    {
        sipNameNr_Point,
        {0, 0, 1},
        3, methods_wxPoint,
        0, 0,
        2, variables_wxPoint,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxPoint,
    -1,
    -1,
    0,
    slots_wxPoint,
    init_wxPoint,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxPoint,
    assign_wxPoint,
    array_wxPoint,
    copy_wxPoint,
    release_wxPoint,
    cast_wxPoint,
    convertTo_wxPoint,
    0,
    0
};
