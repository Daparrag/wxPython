/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.12-snapshot-93040d2c716c
 *
 *     Copyright: (c) 2010 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

#line 1154 "sip/gen/event.sip"
    #include <wx/event.h>
#line 15 "sip_corewxScrollWinEvent.cpp"

#line 40 "sip/gen/object.sip"
    #include <wx/object.h>
#line 19 "sip_corewxScrollWinEvent.cpp"
#line 129 "sip/gen/event.sip"
    #include <wx/event.h>
#line 22 "sip_corewxScrollWinEvent.cpp"
#line 17 "sip/gen/object.sip"
    #include <wx/object.h>
#line 25 "sip_corewxScrollWinEvent.cpp"
#line 84 "sip/gen/object.sip"
    #include <wx/object.h>
#line 28 "sip_corewxScrollWinEvent.cpp"


class sipwxScrollWinEvent : public wxScrollWinEvent
{
public:
    sipwxScrollWinEvent(wxEventType,int,int);
    sipwxScrollWinEvent(const wxScrollWinEvent&);
    virtual ~sipwxScrollWinEvent();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    wxEvent * Clone();
    wxEventCategory GetEventCategory();
    wxClassInfo * GetClassInfo();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxScrollWinEvent(const sipwxScrollWinEvent &);
    sipwxScrollWinEvent &operator = (const sipwxScrollWinEvent &);

    char sipPyMethods[3];
};

sipwxScrollWinEvent::sipwxScrollWinEvent(wxEventType commandType,int pos,int orientation): wxScrollWinEvent(commandType,pos,orientation), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxScrollWinEvent::sipwxScrollWinEvent(const wxScrollWinEvent& a0): wxScrollWinEvent(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxScrollWinEvent::~sipwxScrollWinEvent()
{
    sipCommonDtor(sipPySelf);
}

wxEvent * sipwxScrollWinEvent::Clone()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_Clone);

    if (!sipMeth)
        return wxEvent::Clone();

    extern wxEvent * sipVH__core_1(sip_gilstate_t,PyObject *);

    return sipVH__core_1(sipGILState,sipMeth);
}

wxEventCategory sipwxScrollWinEvent::GetEventCategory()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_GetEventCategory);

    if (!sipMeth)
        return wxEvent::GetEventCategory();

    extern wxEventCategory sipVH__core_0(sip_gilstate_t,PyObject *);

    return sipVH__core_0(sipGILState,sipMeth);
}

wxClassInfo * sipwxScrollWinEvent::GetClassInfo()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_GetClassInfo);

    if (!sipMeth)
        return wxObject::GetClassInfo();

    extern wxClassInfo * sipVH__core_6(sip_gilstate_t,PyObject *);

    return sipVH__core_6(sipGILState,sipMeth);
}


PyDoc_STRVAR(doc_wxScrollWinEvent_GetOrientation, "ScrollWinEvent.GetOrientation() -> int");

extern "C" {static PyObject *meth_wxScrollWinEvent_GetOrientation(PyObject *, PyObject *);}
static PyObject *meth_wxScrollWinEvent_GetOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxScrollWinEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxScrollWinEvent, &sipCpp))
        {
            int sipRes;

            try
            {
            sipRes = sipCpp->GetOrientation();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ScrollWinEvent, sipName_GetOrientation, doc_wxScrollWinEvent_GetOrientation);

    return NULL;
}


PyDoc_STRVAR(doc_wxScrollWinEvent_GetPosition, "ScrollWinEvent.GetPosition() -> int");

extern "C" {static PyObject *meth_wxScrollWinEvent_GetPosition(PyObject *, PyObject *);}
static PyObject *meth_wxScrollWinEvent_GetPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxScrollWinEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxScrollWinEvent, &sipCpp))
        {
            int sipRes;

            try
            {
            sipRes = sipCpp->GetPosition();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ScrollWinEvent, sipName_GetPosition, doc_wxScrollWinEvent_GetPosition);

    return NULL;
}


PyDoc_STRVAR(doc_wxScrollWinEvent_SetOrientation, "ScrollWinEvent.SetOrientation(int)");

extern "C" {static PyObject *meth_wxScrollWinEvent_SetOrientation(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxScrollWinEvent_SetOrientation(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int orient;
        wxScrollWinEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_orient,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxScrollWinEvent, &sipCpp, &orient))
        {
            try
            {
            sipCpp->SetOrientation(orient);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ScrollWinEvent, sipName_SetOrientation, doc_wxScrollWinEvent_SetOrientation);

    return NULL;
}


PyDoc_STRVAR(doc_wxScrollWinEvent_SetPosition, "ScrollWinEvent.SetPosition(int)");

extern "C" {static PyObject *meth_wxScrollWinEvent_SetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxScrollWinEvent_SetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int pos;
        wxScrollWinEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxScrollWinEvent, &sipCpp, &pos))
        {
            try
            {
            sipCpp->SetPosition(pos);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ScrollWinEvent, sipName_SetPosition, doc_wxScrollWinEvent_SetPosition);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_wxScrollWinEvent(void *, const sipTypeDef *);}
static void *cast_wxScrollWinEvent(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_wxScrollWinEvent)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_wxEvent)->ctd_cast((wxEvent *)(wxScrollWinEvent *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxScrollWinEvent(void *, int);}
static void release_wxScrollWinEvent(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxScrollWinEvent *>(sipCppV);
    else
        delete reinterpret_cast<wxScrollWinEvent *>(sipCppV);
}


extern "C" {static void dealloc_wxScrollWinEvent(sipSimpleWrapper *);}
static void dealloc_wxScrollWinEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipwxScrollWinEvent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_wxScrollWinEvent(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_wxScrollWinEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_wxScrollWinEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxScrollWinEvent *sipCpp = 0;

    {
        wxEventType commandType = wxEVT_NULL;
        int pos = 0;
        int orientation = 0;

        static const char *sipKwdList[] = {
            sipName_commandType,
            sipName_pos,
            sipName_orientation,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|iii", &commandType, &pos, &orientation))
        {
            try
            {
            sipCpp = new sipwxScrollWinEvent(commandType,pos,orientation);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const wxScrollWinEvent * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxScrollWinEvent, &a0))
        {
            try
            {
            sipCpp = new sipwxScrollWinEvent(*a0);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxScrollWinEvent[] = {{19, 255, 1}};


static PyMethodDef methods_wxScrollWinEvent[] = {
    {SIP_MLNAME_CAST(sipName_GetOrientation), meth_wxScrollWinEvent_GetOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_wxScrollWinEvent_GetOrientation)},
    {SIP_MLNAME_CAST(sipName_GetPosition), meth_wxScrollWinEvent_GetPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_wxScrollWinEvent_GetPosition)},
    {SIP_MLNAME_CAST(sipName_SetOrientation), (PyCFunction)meth_wxScrollWinEvent_SetOrientation, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxScrollWinEvent_SetOrientation)},
    {SIP_MLNAME_CAST(sipName_SetPosition), (PyCFunction)meth_wxScrollWinEvent_SetPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxScrollWinEvent_SetPosition)}
};

sipVariableDef variables_wxScrollWinEvent[] = {
    {PropertyVariable, sipName_Position, &methods_wxScrollWinEvent[1], &methods_wxScrollWinEvent[3], NULL, NULL},
    {PropertyVariable, sipName_Orientation, &methods_wxScrollWinEvent[0], &methods_wxScrollWinEvent[2], NULL, NULL},
};

PyDoc_STRVAR(doc_wxScrollWinEvent, "\1ScrollWinEvent(int commandType=wxEVT_NULL, int pos=0, int orientation=0)\n"
    "ScrollWinEvent(ScrollWinEvent)");


sipClassTypeDef sipTypeDef__core_wxScrollWinEvent = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_wxScrollWinEvent,
        {0}
    },
    {
        sipNameNr_ScrollWinEvent,
        {0, 0, 1},
        4, methods_wxScrollWinEvent,
        0, 0,
        2, variables_wxScrollWinEvent,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxScrollWinEvent,
    -1,
    -1,
    supers_wxScrollWinEvent,
    0,
    init_wxScrollWinEvent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxScrollWinEvent,
    0,
    0,
    0,
    release_wxScrollWinEvent,
    cast_wxScrollWinEvent,
    0,
    0,
    0
};
