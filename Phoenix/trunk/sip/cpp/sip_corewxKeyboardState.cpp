/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.12-snapshot-93040d2c716c
 *
 *     Copyright: (c) 2010 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

#line 17 "sip/gen/kbdstate.sip"
    #include <wx/kbdstate.h>
#line 15 "sip_corewxKeyboardState.cpp"



PyDoc_STRVAR(doc_wxKeyboardState_GetModifiers, "KeyboardState.GetModifiers() -> int");

extern "C" {static PyObject *meth_wxKeyboardState_GetModifiers(PyObject *, PyObject *);}
static PyObject *meth_wxKeyboardState_GetModifiers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxKeyboardState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxKeyboardState, &sipCpp))
        {
            int sipRes;

            try
            {
            sipRes = sipCpp->GetModifiers();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_KeyboardState, sipName_GetModifiers, doc_wxKeyboardState_GetModifiers);

    return NULL;
}


PyDoc_STRVAR(doc_wxKeyboardState_HasModifiers, "KeyboardState.HasModifiers() -> bool");

extern "C" {static PyObject *meth_wxKeyboardState_HasModifiers(PyObject *, PyObject *);}
static PyObject *meth_wxKeyboardState_HasModifiers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxKeyboardState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxKeyboardState, &sipCpp))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->HasModifiers();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_KeyboardState, sipName_HasModifiers, doc_wxKeyboardState_HasModifiers);

    return NULL;
}


PyDoc_STRVAR(doc_wxKeyboardState_ControlDown, "KeyboardState.ControlDown() -> bool");

extern "C" {static PyObject *meth_wxKeyboardState_ControlDown(PyObject *, PyObject *);}
static PyObject *meth_wxKeyboardState_ControlDown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxKeyboardState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxKeyboardState, &sipCpp))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->ControlDown();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_KeyboardState, sipName_ControlDown, doc_wxKeyboardState_ControlDown);

    return NULL;
}


PyDoc_STRVAR(doc_wxKeyboardState_ShiftDown, "KeyboardState.ShiftDown() -> bool");

extern "C" {static PyObject *meth_wxKeyboardState_ShiftDown(PyObject *, PyObject *);}
static PyObject *meth_wxKeyboardState_ShiftDown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxKeyboardState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxKeyboardState, &sipCpp))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->ShiftDown();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_KeyboardState, sipName_ShiftDown, doc_wxKeyboardState_ShiftDown);

    return NULL;
}


PyDoc_STRVAR(doc_wxKeyboardState_MetaDown, "KeyboardState.MetaDown() -> bool");

extern "C" {static PyObject *meth_wxKeyboardState_MetaDown(PyObject *, PyObject *);}
static PyObject *meth_wxKeyboardState_MetaDown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxKeyboardState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxKeyboardState, &sipCpp))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->MetaDown();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_KeyboardState, sipName_MetaDown, doc_wxKeyboardState_MetaDown);

    return NULL;
}


PyDoc_STRVAR(doc_wxKeyboardState_AltDown, "KeyboardState.AltDown() -> bool");

extern "C" {static PyObject *meth_wxKeyboardState_AltDown(PyObject *, PyObject *);}
static PyObject *meth_wxKeyboardState_AltDown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxKeyboardState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxKeyboardState, &sipCpp))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->AltDown();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_KeyboardState, sipName_AltDown, doc_wxKeyboardState_AltDown);

    return NULL;
}


PyDoc_STRVAR(doc_wxKeyboardState_CmdDown, "KeyboardState.CmdDown() -> bool");

extern "C" {static PyObject *meth_wxKeyboardState_CmdDown(PyObject *, PyObject *);}
static PyObject *meth_wxKeyboardState_CmdDown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxKeyboardState *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxKeyboardState, &sipCpp))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->CmdDown();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_KeyboardState, sipName_CmdDown, doc_wxKeyboardState_CmdDown);

    return NULL;
}


PyDoc_STRVAR(doc_wxKeyboardState_SetControlDown, "KeyboardState.SetControlDown(bool)");

extern "C" {static PyObject *meth_wxKeyboardState_SetControlDown(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxKeyboardState_SetControlDown(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool down;
        wxKeyboardState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_down,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxKeyboardState, &sipCpp, &down))
        {
            try
            {
            sipCpp->SetControlDown(down);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_KeyboardState, sipName_SetControlDown, doc_wxKeyboardState_SetControlDown);

    return NULL;
}


PyDoc_STRVAR(doc_wxKeyboardState_SetShiftDown, "KeyboardState.SetShiftDown(bool)");

extern "C" {static PyObject *meth_wxKeyboardState_SetShiftDown(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxKeyboardState_SetShiftDown(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool down;
        wxKeyboardState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_down,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxKeyboardState, &sipCpp, &down))
        {
            try
            {
            sipCpp->SetShiftDown(down);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_KeyboardState, sipName_SetShiftDown, doc_wxKeyboardState_SetShiftDown);

    return NULL;
}


PyDoc_STRVAR(doc_wxKeyboardState_SetAltDown, "KeyboardState.SetAltDown(bool)");

extern "C" {static PyObject *meth_wxKeyboardState_SetAltDown(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxKeyboardState_SetAltDown(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool down;
        wxKeyboardState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_down,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxKeyboardState, &sipCpp, &down))
        {
            try
            {
            sipCpp->SetAltDown(down);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_KeyboardState, sipName_SetAltDown, doc_wxKeyboardState_SetAltDown);

    return NULL;
}


PyDoc_STRVAR(doc_wxKeyboardState_SetMetaDown, "KeyboardState.SetMetaDown(bool)");

extern "C" {static PyObject *meth_wxKeyboardState_SetMetaDown(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxKeyboardState_SetMetaDown(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool down;
        wxKeyboardState *sipCpp;

        static const char *sipKwdList[] = {
            sipName_down,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxKeyboardState, &sipCpp, &down))
        {
            try
            {
            sipCpp->SetMetaDown(down);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_KeyboardState, sipName_SetMetaDown, doc_wxKeyboardState_SetMetaDown);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_wxKeyboardState(void *, const sipTypeDef *);}
static void *cast_wxKeyboardState(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_wxKeyboardState)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxKeyboardState(void *, int);}
static void release_wxKeyboardState(void *sipCppV,int)
{
    delete reinterpret_cast<wxKeyboardState *>(sipCppV);
}


extern "C" {static void assign_wxKeyboardState(void *, SIP_SSIZE_T, const void *);}
static void assign_wxKeyboardState(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<wxKeyboardState *>(sipDst)[sipDstIdx] = *reinterpret_cast<const wxKeyboardState *>(sipSrc);
}


extern "C" {static void *array_wxKeyboardState(SIP_SSIZE_T);}
static void *array_wxKeyboardState(SIP_SSIZE_T sipNrElem)
{
    return new wxKeyboardState[sipNrElem];
}


extern "C" {static void *copy_wxKeyboardState(const void *, SIP_SSIZE_T);}
static void *copy_wxKeyboardState(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new wxKeyboardState(reinterpret_cast<const wxKeyboardState *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxKeyboardState(sipSimpleWrapper *);}
static void dealloc_wxKeyboardState(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_wxKeyboardState(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_wxKeyboardState(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_wxKeyboardState(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    wxKeyboardState *sipCpp = 0;

    {
        bool controlDown = 0;
        bool shiftDown = 0;
        bool altDown = 0;
        bool metaDown = 0;

        static const char *sipKwdList[] = {
            sipName_controlDown,
            sipName_shiftDown,
            sipName_altDown,
            sipName_metaDown,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|bbbb", &controlDown, &shiftDown, &altDown, &metaDown))
        {
            try
            {
            sipCpp = new wxKeyboardState(controlDown,shiftDown,altDown,metaDown);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipCpp;
        }
    }

    {
        const wxKeyboardState * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxKeyboardState, &a0))
        {
            try
            {
            sipCpp = new wxKeyboardState(*a0);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_wxKeyboardState[] = {
    {SIP_MLNAME_CAST(sipName_AltDown), meth_wxKeyboardState_AltDown, METH_VARARGS, SIP_MLDOC_CAST(doc_wxKeyboardState_AltDown)},
    {SIP_MLNAME_CAST(sipName_CmdDown), meth_wxKeyboardState_CmdDown, METH_VARARGS, SIP_MLDOC_CAST(doc_wxKeyboardState_CmdDown)},
    {SIP_MLNAME_CAST(sipName_ControlDown), meth_wxKeyboardState_ControlDown, METH_VARARGS, SIP_MLDOC_CAST(doc_wxKeyboardState_ControlDown)},
    {SIP_MLNAME_CAST(sipName_GetModifiers), meth_wxKeyboardState_GetModifiers, METH_VARARGS, SIP_MLDOC_CAST(doc_wxKeyboardState_GetModifiers)},
    {SIP_MLNAME_CAST(sipName_HasModifiers), meth_wxKeyboardState_HasModifiers, METH_VARARGS, SIP_MLDOC_CAST(doc_wxKeyboardState_HasModifiers)},
    {SIP_MLNAME_CAST(sipName_MetaDown), meth_wxKeyboardState_MetaDown, METH_VARARGS, SIP_MLDOC_CAST(doc_wxKeyboardState_MetaDown)},
    {SIP_MLNAME_CAST(sipName_SetAltDown), (PyCFunction)meth_wxKeyboardState_SetAltDown, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxKeyboardState_SetAltDown)},
    {SIP_MLNAME_CAST(sipName_SetControlDown), (PyCFunction)meth_wxKeyboardState_SetControlDown, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxKeyboardState_SetControlDown)},
    {SIP_MLNAME_CAST(sipName_SetMetaDown), (PyCFunction)meth_wxKeyboardState_SetMetaDown, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxKeyboardState_SetMetaDown)},
    {SIP_MLNAME_CAST(sipName_SetShiftDown), (PyCFunction)meth_wxKeyboardState_SetShiftDown, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxKeyboardState_SetShiftDown)},
    {SIP_MLNAME_CAST(sipName_ShiftDown), meth_wxKeyboardState_ShiftDown, METH_VARARGS, SIP_MLDOC_CAST(doc_wxKeyboardState_ShiftDown)}
};

sipVariableDef variables_wxKeyboardState[] = {
    {PropertyVariable, sipName_cmdDown, &methods_wxKeyboardState[1], NULL, NULL, NULL},
    {PropertyVariable, sipName_metaDown, &methods_wxKeyboardState[5], &methods_wxKeyboardState[8], NULL, NULL},
    {PropertyVariable, sipName_altDown, &methods_wxKeyboardState[0], &methods_wxKeyboardState[6], NULL, NULL},
    {PropertyVariable, sipName_shiftDown, &methods_wxKeyboardState[10], &methods_wxKeyboardState[9], NULL, NULL},
    {PropertyVariable, sipName_controlDown, &methods_wxKeyboardState[2], &methods_wxKeyboardState[7], NULL, NULL},
};

PyDoc_STRVAR(doc_wxKeyboardState, "\1KeyboardState(bool controlDown=False, bool shiftDown=False, bool altDown=False, bool metaDown=False)\n"
    "KeyboardState(KeyboardState)");


sipClassTypeDef sipTypeDef__core_wxKeyboardState = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_wxKeyboardState,
        {0}
    },
    {
        sipNameNr_KeyboardState,
        {0, 0, 1},
        11, methods_wxKeyboardState,
        0, 0,
        5, variables_wxKeyboardState,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxKeyboardState,
    -1,
    -1,
    0,
    0,
    init_wxKeyboardState,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxKeyboardState,
    assign_wxKeyboardState,
    array_wxKeyboardState,
    copy_wxKeyboardState,
    release_wxKeyboardState,
    cast_wxKeyboardState,
    0,
    0,
    0
};
