/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.12-snapshot-93040d2c716c
 *
 *     Copyright: (c) 2010 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

#line 36 "sip/gen/event.sip"
    #include <wx/event.h>
#line 15 "sip_corewxEvtHandler.cpp"

#line 129 "sip/gen/event.sip"
    #include <wx/event.h>
#line 19 "sip_corewxEvtHandler.cpp"
#line 17 "sip/gen/object.sip"
    #include <wx/object.h>
#line 22 "sip_corewxEvtHandler.cpp"
#line 40 "sip/gen/object.sip"
    #include <wx/object.h>
#line 25 "sip_corewxEvtHandler.cpp"
#line 84 "sip/gen/object.sip"
    #include <wx/object.h>
#line 28 "sip_corewxEvtHandler.cpp"


class sipwxEvtHandler : public wxEvtHandler
{
public:
    sipwxEvtHandler();
    virtual ~sipwxEvtHandler();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void QueueEvent(wxEvent *);
    void AddPendingEvent(const wxEvent&);
    bool ProcessEvent(wxEvent&);
    void SetNextHandler(wxEvtHandler *);
    void SetPreviousHandler(wxEvtHandler *);
    wxClassInfo * GetClassInfo();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxEvtHandler(const sipwxEvtHandler &);
    sipwxEvtHandler &operator = (const sipwxEvtHandler &);

    char sipPyMethods[6];
};

sipwxEvtHandler::sipwxEvtHandler(): wxEvtHandler(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxEvtHandler::~sipwxEvtHandler()
{
    sipCommonDtor(sipPySelf);
}

void sipwxEvtHandler::QueueEvent(wxEvent *event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_QueueEvent);

    if (!sipMeth)
    {
        wxEvtHandler::QueueEvent(event);
        return;
    }

    extern void sipVH__core_5(sip_gilstate_t,PyObject *,wxEvent *);

    sipVH__core_5(sipGILState,sipMeth,event);
}

void sipwxEvtHandler::AddPendingEvent(const wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_AddPendingEvent);

    if (!sipMeth)
    {
        wxEvtHandler::AddPendingEvent(event);
        return;
    }

    extern void sipVH__core_4(sip_gilstate_t,PyObject *,const wxEvent&);

    sipVH__core_4(sipGILState,sipMeth,event);
}

bool sipwxEvtHandler::ProcessEvent(wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_ProcessEvent);

    if (!sipMeth)
        return wxEvtHandler::ProcessEvent(event);

    extern bool sipVH__core_3(sip_gilstate_t,PyObject *,wxEvent&);

    return sipVH__core_3(sipGILState,sipMeth,event);
}

void sipwxEvtHandler::SetNextHandler(wxEvtHandler *handler)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_SetNextHandler);

    if (!sipMeth)
    {
        wxEvtHandler::SetNextHandler(handler);
        return;
    }

    extern void sipVH__core_2(sip_gilstate_t,PyObject *,wxEvtHandler *);

    sipVH__core_2(sipGILState,sipMeth,handler);
}

void sipwxEvtHandler::SetPreviousHandler(wxEvtHandler *handler)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_SetPreviousHandler);

    if (!sipMeth)
    {
        wxEvtHandler::SetPreviousHandler(handler);
        return;
    }

    extern void sipVH__core_2(sip_gilstate_t,PyObject *,wxEvtHandler *);

    sipVH__core_2(sipGILState,sipMeth,handler);
}

wxClassInfo * sipwxEvtHandler::GetClassInfo()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_GetClassInfo);

    if (!sipMeth)
        return wxObject::GetClassInfo();

    extern wxClassInfo * sipVH__core_6(sip_gilstate_t,PyObject *);

    return sipVH__core_6(sipGILState,sipMeth);
}


PyDoc_STRVAR(doc_wxEvtHandler_QueueEvent, "EvtHandler.QueueEvent(Event)");

extern "C" {static PyObject *meth_wxEvtHandler_QueueEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxEvtHandler_QueueEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        wxEvent * event;
        wxEvtHandler *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxEvtHandler, &sipCpp, sipType_wxEvent, &event))
        {
            try
            {
            (sipSelfWasArg ? sipCpp->wxEvtHandler::QueueEvent(event) : sipCpp->QueueEvent(event));
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EvtHandler, sipName_QueueEvent, doc_wxEvtHandler_QueueEvent);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvtHandler_AddPendingEvent, "EvtHandler.AddPendingEvent(Event)");

extern "C" {static PyObject *meth_wxEvtHandler_AddPendingEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxEvtHandler_AddPendingEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const wxEvent * event;
        wxEvtHandler *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxEvtHandler, &sipCpp, sipType_wxEvent, &event))
        {
            try
            {
            (sipSelfWasArg ? sipCpp->wxEvtHandler::AddPendingEvent(*event) : sipCpp->AddPendingEvent(*event));
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EvtHandler, sipName_AddPendingEvent, doc_wxEvtHandler_AddPendingEvent);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvtHandler_ProcessEvent, "EvtHandler.ProcessEvent(Event) -> bool");

extern "C" {static PyObject *meth_wxEvtHandler_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxEvtHandler_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        wxEvent * event;
        wxEvtHandler *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxEvtHandler, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            try
            {
            sipRes = (sipSelfWasArg ? sipCpp->wxEvtHandler::ProcessEvent(*event) : sipCpp->ProcessEvent(*event));
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EvtHandler, sipName_ProcessEvent, doc_wxEvtHandler_ProcessEvent);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvtHandler_ProcessEventLocally, "EvtHandler.ProcessEventLocally(Event) -> bool");

extern "C" {static PyObject *meth_wxEvtHandler_ProcessEventLocally(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxEvtHandler_ProcessEventLocally(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        wxEvent * event;
        wxEvtHandler *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxEvtHandler, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->ProcessEventLocally(*event);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EvtHandler, sipName_ProcessEventLocally, doc_wxEvtHandler_ProcessEventLocally);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvtHandler_SafelyProcessEvent, "EvtHandler.SafelyProcessEvent(Event) -> bool");

extern "C" {static PyObject *meth_wxEvtHandler_SafelyProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxEvtHandler_SafelyProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        wxEvent * event;
        wxEvtHandler *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxEvtHandler, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->SafelyProcessEvent(*event);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EvtHandler, sipName_SafelyProcessEvent, doc_wxEvtHandler_SafelyProcessEvent);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvtHandler_ProcessPendingEvents, "EvtHandler.ProcessPendingEvents()");

extern "C" {static PyObject *meth_wxEvtHandler_ProcessPendingEvents(PyObject *, PyObject *);}
static PyObject *meth_wxEvtHandler_ProcessPendingEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxEvtHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxEvtHandler, &sipCpp))
        {
            try
            {
            sipCpp->ProcessPendingEvents();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EvtHandler, sipName_ProcessPendingEvents, doc_wxEvtHandler_ProcessPendingEvents);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvtHandler_DeletePendingEvents, "EvtHandler.DeletePendingEvents()");

extern "C" {static PyObject *meth_wxEvtHandler_DeletePendingEvents(PyObject *, PyObject *);}
static PyObject *meth_wxEvtHandler_DeletePendingEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxEvtHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxEvtHandler, &sipCpp))
        {
            try
            {
            sipCpp->DeletePendingEvents();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EvtHandler, sipName_DeletePendingEvents, doc_wxEvtHandler_DeletePendingEvents);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvtHandler_GetEvtHandlerEnabled, "EvtHandler.GetEvtHandlerEnabled() -> bool");

extern "C" {static PyObject *meth_wxEvtHandler_GetEvtHandlerEnabled(PyObject *, PyObject *);}
static PyObject *meth_wxEvtHandler_GetEvtHandlerEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxEvtHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxEvtHandler, &sipCpp))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->GetEvtHandlerEnabled();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EvtHandler, sipName_GetEvtHandlerEnabled, doc_wxEvtHandler_GetEvtHandlerEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvtHandler_GetNextHandler, "EvtHandler.GetNextHandler() -> EvtHandler");

extern "C" {static PyObject *meth_wxEvtHandler_GetNextHandler(PyObject *, PyObject *);}
static PyObject *meth_wxEvtHandler_GetNextHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxEvtHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxEvtHandler, &sipCpp))
        {
            wxEvtHandler *sipRes;

            try
            {
            sipRes = sipCpp->GetNextHandler();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromType(sipRes,sipType_wxEvtHandler,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EvtHandler, sipName_GetNextHandler, doc_wxEvtHandler_GetNextHandler);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvtHandler_GetPreviousHandler, "EvtHandler.GetPreviousHandler() -> EvtHandler");

extern "C" {static PyObject *meth_wxEvtHandler_GetPreviousHandler(PyObject *, PyObject *);}
static PyObject *meth_wxEvtHandler_GetPreviousHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxEvtHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxEvtHandler, &sipCpp))
        {
            wxEvtHandler *sipRes;

            try
            {
            sipRes = sipCpp->GetPreviousHandler();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return sipConvertFromType(sipRes,sipType_wxEvtHandler,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EvtHandler, sipName_GetPreviousHandler, doc_wxEvtHandler_GetPreviousHandler);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvtHandler_SetEvtHandlerEnabled, "EvtHandler.SetEvtHandlerEnabled(bool)");

extern "C" {static PyObject *meth_wxEvtHandler_SetEvtHandlerEnabled(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxEvtHandler_SetEvtHandlerEnabled(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool enabled;
        wxEvtHandler *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxEvtHandler, &sipCpp, &enabled))
        {
            try
            {
            sipCpp->SetEvtHandlerEnabled(enabled);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EvtHandler, sipName_SetEvtHandlerEnabled, doc_wxEvtHandler_SetEvtHandlerEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvtHandler_SetNextHandler, "EvtHandler.SetNextHandler(EvtHandler)");

extern "C" {static PyObject *meth_wxEvtHandler_SetNextHandler(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxEvtHandler_SetNextHandler(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        wxEvtHandler * handler;
        wxEvtHandler *sipCpp;

        static const char *sipKwdList[] = {
            sipName_handler,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxEvtHandler, &sipCpp, sipType_wxEvtHandler, &handler))
        {
            try
            {
            (sipSelfWasArg ? sipCpp->wxEvtHandler::SetNextHandler(handler) : sipCpp->SetNextHandler(handler));
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EvtHandler, sipName_SetNextHandler, doc_wxEvtHandler_SetNextHandler);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvtHandler_SetPreviousHandler, "EvtHandler.SetPreviousHandler(EvtHandler)");

extern "C" {static PyObject *meth_wxEvtHandler_SetPreviousHandler(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxEvtHandler_SetPreviousHandler(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        wxEvtHandler * handler;
        wxEvtHandler *sipCpp;

        static const char *sipKwdList[] = {
            sipName_handler,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxEvtHandler, &sipCpp, sipType_wxEvtHandler, &handler))
        {
            try
            {
            (sipSelfWasArg ? sipCpp->wxEvtHandler::SetPreviousHandler(handler) : sipCpp->SetPreviousHandler(handler));
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EvtHandler, sipName_SetPreviousHandler, doc_wxEvtHandler_SetPreviousHandler);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvtHandler_Unlink, "EvtHandler.Unlink()");

extern "C" {static PyObject *meth_wxEvtHandler_Unlink(PyObject *, PyObject *);}
static PyObject *meth_wxEvtHandler_Unlink(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxEvtHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxEvtHandler, &sipCpp))
        {
            try
            {
            sipCpp->Unlink();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EvtHandler, sipName_Unlink, doc_wxEvtHandler_Unlink);

    return NULL;
}


PyDoc_STRVAR(doc_wxEvtHandler_IsUnlinked, "EvtHandler.IsUnlinked() -> bool");

extern "C" {static PyObject *meth_wxEvtHandler_IsUnlinked(PyObject *, PyObject *);}
static PyObject *meth_wxEvtHandler_IsUnlinked(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxEvtHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxEvtHandler, &sipCpp))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->IsUnlinked();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_EvtHandler, sipName_IsUnlinked, doc_wxEvtHandler_IsUnlinked);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_wxEvtHandler(void *, const sipTypeDef *);}
static void *cast_wxEvtHandler(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_wxEvtHandler)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_wxObject)->ctd_cast((wxObject *)(wxEvtHandler *)ptr,targetType)) != NULL)
        return res;

    if ((res = ((const sipClassTypeDef *)sipType_wxTrackable)->ctd_cast((wxTrackable *)(wxEvtHandler *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxEvtHandler(void *, int);}
static void release_wxEvtHandler(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxEvtHandler *>(sipCppV);
    else
        delete reinterpret_cast<wxEvtHandler *>(sipCppV);
}


extern "C" {static void dealloc_wxEvtHandler(sipSimpleWrapper *);}
static void dealloc_wxEvtHandler(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipwxEvtHandler *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_wxEvtHandler(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_wxEvtHandler(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_wxEvtHandler(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxEvtHandler *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            try
            {
            sipCpp = new sipwxEvtHandler();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxEvtHandler[] = {{53, 255, 0}, {81, 255, 1}};


static PyMethodDef methods_wxEvtHandler[] = {
    {SIP_MLNAME_CAST(sipName_AddPendingEvent), (PyCFunction)meth_wxEvtHandler_AddPendingEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxEvtHandler_AddPendingEvent)},
    {SIP_MLNAME_CAST(sipName_DeletePendingEvents), meth_wxEvtHandler_DeletePendingEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_wxEvtHandler_DeletePendingEvents)},
    {SIP_MLNAME_CAST(sipName_GetEvtHandlerEnabled), meth_wxEvtHandler_GetEvtHandlerEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_wxEvtHandler_GetEvtHandlerEnabled)},
    {SIP_MLNAME_CAST(sipName_GetNextHandler), meth_wxEvtHandler_GetNextHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_wxEvtHandler_GetNextHandler)},
    {SIP_MLNAME_CAST(sipName_GetPreviousHandler), meth_wxEvtHandler_GetPreviousHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_wxEvtHandler_GetPreviousHandler)},
    {SIP_MLNAME_CAST(sipName_IsUnlinked), meth_wxEvtHandler_IsUnlinked, METH_VARARGS, SIP_MLDOC_CAST(doc_wxEvtHandler_IsUnlinked)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), (PyCFunction)meth_wxEvtHandler_ProcessEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxEvtHandler_ProcessEvent)},
    {SIP_MLNAME_CAST(sipName_ProcessEventLocally), (PyCFunction)meth_wxEvtHandler_ProcessEventLocally, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxEvtHandler_ProcessEventLocally)},
    {SIP_MLNAME_CAST(sipName_ProcessPendingEvents), meth_wxEvtHandler_ProcessPendingEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_wxEvtHandler_ProcessPendingEvents)},
    {SIP_MLNAME_CAST(sipName_QueueEvent), (PyCFunction)meth_wxEvtHandler_QueueEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxEvtHandler_QueueEvent)},
    {SIP_MLNAME_CAST(sipName_SafelyProcessEvent), (PyCFunction)meth_wxEvtHandler_SafelyProcessEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxEvtHandler_SafelyProcessEvent)},
    {SIP_MLNAME_CAST(sipName_SetEvtHandlerEnabled), (PyCFunction)meth_wxEvtHandler_SetEvtHandlerEnabled, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxEvtHandler_SetEvtHandlerEnabled)},
    {SIP_MLNAME_CAST(sipName_SetNextHandler), (PyCFunction)meth_wxEvtHandler_SetNextHandler, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxEvtHandler_SetNextHandler)},
    {SIP_MLNAME_CAST(sipName_SetPreviousHandler), (PyCFunction)meth_wxEvtHandler_SetPreviousHandler, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxEvtHandler_SetPreviousHandler)},
    {SIP_MLNAME_CAST(sipName_Unlink), meth_wxEvtHandler_Unlink, METH_VARARGS, SIP_MLDOC_CAST(doc_wxEvtHandler_Unlink)}
};

PyDoc_STRVAR(doc_wxEvtHandler, "\1EvtHandler()");


sipClassTypeDef sipTypeDef__core_wxEvtHandler = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_wxEvtHandler,
        {0}
    },
    {
        sipNameNr_EvtHandler,
        {0, 0, 1},
        15, methods_wxEvtHandler,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxEvtHandler,
    -1,
    -1,
    supers_wxEvtHandler,
    0,
    init_wxEvtHandler,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxEvtHandler,
    0,
    0,
    0,
    release_wxEvtHandler,
    cast_wxEvtHandler,
    0,
    0,
    0
};
