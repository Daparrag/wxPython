/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.12-snapshot-93040d2c716c
 *
 *     Copyright: (c) 2010 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

#line 1229 "sip/gen/event.sip"
    #include <wx/event.h>
#line 15 "sip_corewxShowEvent.cpp"

#line 40 "sip/gen/object.sip"
    #include <wx/object.h>
#line 19 "sip_corewxShowEvent.cpp"
#line 129 "sip/gen/event.sip"
    #include <wx/event.h>
#line 22 "sip_corewxShowEvent.cpp"
#line 17 "sip/gen/object.sip"
    #include <wx/object.h>
#line 25 "sip_corewxShowEvent.cpp"
#line 84 "sip/gen/object.sip"
    #include <wx/object.h>
#line 28 "sip_corewxShowEvent.cpp"


class sipwxShowEvent : public wxShowEvent
{
public:
    sipwxShowEvent(int,bool);
    sipwxShowEvent(const wxShowEvent&);
    virtual ~sipwxShowEvent();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    wxEvent * Clone();
    wxEventCategory GetEventCategory();
    wxClassInfo * GetClassInfo();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxShowEvent(const sipwxShowEvent &);
    sipwxShowEvent &operator = (const sipwxShowEvent &);

    char sipPyMethods[3];
};

sipwxShowEvent::sipwxShowEvent(int winid,bool show): wxShowEvent(winid,show), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxShowEvent::sipwxShowEvent(const wxShowEvent& a0): wxShowEvent(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxShowEvent::~sipwxShowEvent()
{
    sipCommonDtor(sipPySelf);
}

wxEvent * sipwxShowEvent::Clone()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_Clone);

    if (!sipMeth)
        return wxEvent::Clone();

    extern wxEvent * sipVH__core_1(sip_gilstate_t,PyObject *);

    return sipVH__core_1(sipGILState,sipMeth);
}

wxEventCategory sipwxShowEvent::GetEventCategory()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_GetEventCategory);

    if (!sipMeth)
        return wxEvent::GetEventCategory();

    extern wxEventCategory sipVH__core_0(sip_gilstate_t,PyObject *);

    return sipVH__core_0(sipGILState,sipMeth);
}

wxClassInfo * sipwxShowEvent::GetClassInfo()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_GetClassInfo);

    if (!sipMeth)
        return wxObject::GetClassInfo();

    extern wxClassInfo * sipVH__core_6(sip_gilstate_t,PyObject *);

    return sipVH__core_6(sipGILState,sipMeth);
}


PyDoc_STRVAR(doc_wxShowEvent_SetShow, "ShowEvent.SetShow(bool)");

extern "C" {static PyObject *meth_wxShowEvent_SetShow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxShowEvent_SetShow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool show;
        wxShowEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_show,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxShowEvent, &sipCpp, &show))
        {
            try
            {
            sipCpp->SetShow(show);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ShowEvent, sipName_SetShow, doc_wxShowEvent_SetShow);

    return NULL;
}


PyDoc_STRVAR(doc_wxShowEvent_IsShown, "ShowEvent.IsShown() -> bool");

extern "C" {static PyObject *meth_wxShowEvent_IsShown(PyObject *, PyObject *);}
static PyObject *meth_wxShowEvent_IsShown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxShowEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxShowEvent, &sipCpp))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->IsShown();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ShowEvent, sipName_IsShown, doc_wxShowEvent_IsShown);

    return NULL;
}


PyDoc_STRVAR(doc_wxShowEvent_GetShow, "ShowEvent.GetShow() -> bool");

extern "C" {static PyObject *meth_wxShowEvent_GetShow(PyObject *, PyObject *);}
static PyObject *meth_wxShowEvent_GetShow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxShowEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxShowEvent, &sipCpp))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->GetShow();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ShowEvent, sipName_GetShow, doc_wxShowEvent_GetShow);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_wxShowEvent(void *, const sipTypeDef *);}
static void *cast_wxShowEvent(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_wxShowEvent)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_wxEvent)->ctd_cast((wxEvent *)(wxShowEvent *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxShowEvent(void *, int);}
static void release_wxShowEvent(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxShowEvent *>(sipCppV);
    else
        delete reinterpret_cast<wxShowEvent *>(sipCppV);
}


extern "C" {static void dealloc_wxShowEvent(sipSimpleWrapper *);}
static void dealloc_wxShowEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipwxShowEvent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_wxShowEvent(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_wxShowEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_wxShowEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxShowEvent *sipCpp = 0;

    {
        int winid = 0;
        bool show = 0;

        static const char *sipKwdList[] = {
            sipName_winid,
            sipName_show,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|ib", &winid, &show))
        {
            try
            {
            sipCpp = new sipwxShowEvent(winid,show);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const wxShowEvent * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxShowEvent, &a0))
        {
            try
            {
            sipCpp = new sipwxShowEvent(*a0);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxShowEvent[] = {{19, 255, 1}};


static PyMethodDef methods_wxShowEvent[] = {
    {SIP_MLNAME_CAST(sipName_GetShow), meth_wxShowEvent_GetShow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxShowEvent_GetShow)},
    {SIP_MLNAME_CAST(sipName_IsShown), meth_wxShowEvent_IsShown, METH_VARARGS, SIP_MLDOC_CAST(doc_wxShowEvent_IsShown)},
    {SIP_MLNAME_CAST(sipName_SetShow), (PyCFunction)meth_wxShowEvent_SetShow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxShowEvent_SetShow)}
};

sipVariableDef variables_wxShowEvent[] = {
    {PropertyVariable, sipName_Show, &methods_wxShowEvent[1], &methods_wxShowEvent[2], NULL, NULL},
};

PyDoc_STRVAR(doc_wxShowEvent, "\1ShowEvent(int winid=0, bool show=False)\n"
    "ShowEvent(ShowEvent)");


sipClassTypeDef sipTypeDef__core_wxShowEvent = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_wxShowEvent,
        {0}
    },
    {
        sipNameNr_ShowEvent,
        {0, 0, 1},
        3, methods_wxShowEvent,
        0, 0,
        1, variables_wxShowEvent,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxShowEvent,
    -1,
    -1,
    supers_wxShowEvent,
    0,
    init_wxShowEvent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxShowEvent,
    0,
    0,
    0,
    release_wxShowEvent,
    cast_wxShowEvent,
    0,
    0,
    0
};
