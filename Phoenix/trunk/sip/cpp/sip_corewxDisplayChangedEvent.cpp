/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.12-snapshot-93040d2c716c
 *
 *     Copyright: (c) 2010 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

#line 410 "sip/gen/event.sip"
    #include <wx/event.h>
#line 15 "sip_corewxDisplayChangedEvent.cpp"

#line 40 "sip/gen/object.sip"
    #include <wx/object.h>
#line 19 "sip_corewxDisplayChangedEvent.cpp"
#line 129 "sip/gen/event.sip"
    #include <wx/event.h>
#line 22 "sip_corewxDisplayChangedEvent.cpp"
#line 17 "sip/gen/object.sip"
    #include <wx/object.h>
#line 25 "sip_corewxDisplayChangedEvent.cpp"
#line 84 "sip/gen/object.sip"
    #include <wx/object.h>
#line 28 "sip_corewxDisplayChangedEvent.cpp"


class sipwxDisplayChangedEvent : public wxDisplayChangedEvent
{
public:
    sipwxDisplayChangedEvent();
    sipwxDisplayChangedEvent(const wxDisplayChangedEvent&);
    virtual ~sipwxDisplayChangedEvent();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    wxEvent * Clone();
    wxEventCategory GetEventCategory();
    wxClassInfo * GetClassInfo();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxDisplayChangedEvent(const sipwxDisplayChangedEvent &);
    sipwxDisplayChangedEvent &operator = (const sipwxDisplayChangedEvent &);

    char sipPyMethods[3];
};

sipwxDisplayChangedEvent::sipwxDisplayChangedEvent(): wxDisplayChangedEvent(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxDisplayChangedEvent::sipwxDisplayChangedEvent(const wxDisplayChangedEvent& a0): wxDisplayChangedEvent(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxDisplayChangedEvent::~sipwxDisplayChangedEvent()
{
    sipCommonDtor(sipPySelf);
}

wxEvent * sipwxDisplayChangedEvent::Clone()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_Clone);

    if (!sipMeth)
        return wxEvent::Clone();

    extern wxEvent * sipVH__core_1(sip_gilstate_t,PyObject *);

    return sipVH__core_1(sipGILState,sipMeth);
}

wxEventCategory sipwxDisplayChangedEvent::GetEventCategory()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_GetEventCategory);

    if (!sipMeth)
        return wxEvent::GetEventCategory();

    extern wxEventCategory sipVH__core_0(sip_gilstate_t,PyObject *);

    return sipVH__core_0(sipGILState,sipMeth);
}

wxClassInfo * sipwxDisplayChangedEvent::GetClassInfo()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_GetClassInfo);

    if (!sipMeth)
        return wxObject::GetClassInfo();

    extern wxClassInfo * sipVH__core_6(sip_gilstate_t,PyObject *);

    return sipVH__core_6(sipGILState,sipMeth);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_wxDisplayChangedEvent(void *, const sipTypeDef *);}
static void *cast_wxDisplayChangedEvent(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_wxDisplayChangedEvent)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_wxEvent)->ctd_cast((wxEvent *)(wxDisplayChangedEvent *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxDisplayChangedEvent(void *, int);}
static void release_wxDisplayChangedEvent(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxDisplayChangedEvent *>(sipCppV);
    else
        delete reinterpret_cast<wxDisplayChangedEvent *>(sipCppV);
}


extern "C" {static void dealloc_wxDisplayChangedEvent(sipSimpleWrapper *);}
static void dealloc_wxDisplayChangedEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipwxDisplayChangedEvent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_wxDisplayChangedEvent(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_wxDisplayChangedEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_wxDisplayChangedEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxDisplayChangedEvent *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            try
            {
            sipCpp = new sipwxDisplayChangedEvent();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const wxDisplayChangedEvent * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxDisplayChangedEvent, &a0))
        {
            try
            {
            sipCpp = new sipwxDisplayChangedEvent(*a0);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxDisplayChangedEvent[] = {{19, 255, 1}};

PyDoc_STRVAR(doc_wxDisplayChangedEvent, "\1DisplayChangedEvent()\n"
    "DisplayChangedEvent(DisplayChangedEvent)");


sipClassTypeDef sipTypeDef__core_wxDisplayChangedEvent = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_wxDisplayChangedEvent,
        {0}
    },
    {
        sipNameNr_DisplayChangedEvent,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxDisplayChangedEvent,
    -1,
    -1,
    supers_wxDisplayChangedEvent,
    0,
    init_wxDisplayChangedEvent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxDisplayChangedEvent,
    0,
    0,
    0,
    release_wxDisplayChangedEvent,
    cast_wxDisplayChangedEvent,
    0,
    0,
    0
};
