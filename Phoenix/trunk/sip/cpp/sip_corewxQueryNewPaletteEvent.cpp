/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.12-snapshot-93040d2c716c
 *
 *     Copyright: (c) 2010 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

#line 1089 "sip/gen/event.sip"
    #include <wx/event.h>
#line 15 "sip_corewxQueryNewPaletteEvent.cpp"

#line 40 "sip/gen/object.sip"
    #include <wx/object.h>
#line 19 "sip_corewxQueryNewPaletteEvent.cpp"
#line 129 "sip/gen/event.sip"
    #include <wx/event.h>
#line 22 "sip_corewxQueryNewPaletteEvent.cpp"
#line 17 "sip/gen/object.sip"
    #include <wx/object.h>
#line 25 "sip_corewxQueryNewPaletteEvent.cpp"
#line 84 "sip/gen/object.sip"
    #include <wx/object.h>
#line 28 "sip_corewxQueryNewPaletteEvent.cpp"


class sipwxQueryNewPaletteEvent : public wxQueryNewPaletteEvent
{
public:
    sipwxQueryNewPaletteEvent(wxWindowID);
    sipwxQueryNewPaletteEvent(const wxQueryNewPaletteEvent&);
    virtual ~sipwxQueryNewPaletteEvent();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    wxEvent * Clone();
    wxEventCategory GetEventCategory();
    wxClassInfo * GetClassInfo();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxQueryNewPaletteEvent(const sipwxQueryNewPaletteEvent &);
    sipwxQueryNewPaletteEvent &operator = (const sipwxQueryNewPaletteEvent &);

    char sipPyMethods[3];
};

sipwxQueryNewPaletteEvent::sipwxQueryNewPaletteEvent(wxWindowID winid): wxQueryNewPaletteEvent(winid), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxQueryNewPaletteEvent::sipwxQueryNewPaletteEvent(const wxQueryNewPaletteEvent& a0): wxQueryNewPaletteEvent(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxQueryNewPaletteEvent::~sipwxQueryNewPaletteEvent()
{
    sipCommonDtor(sipPySelf);
}

wxEvent * sipwxQueryNewPaletteEvent::Clone()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_Clone);

    if (!sipMeth)
        return wxEvent::Clone();

    extern wxEvent * sipVH__core_1(sip_gilstate_t,PyObject *);

    return sipVH__core_1(sipGILState,sipMeth);
}

wxEventCategory sipwxQueryNewPaletteEvent::GetEventCategory()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_GetEventCategory);

    if (!sipMeth)
        return wxEvent::GetEventCategory();

    extern wxEventCategory sipVH__core_0(sip_gilstate_t,PyObject *);

    return sipVH__core_0(sipGILState,sipMeth);
}

wxClassInfo * sipwxQueryNewPaletteEvent::GetClassInfo()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_GetClassInfo);

    if (!sipMeth)
        return wxObject::GetClassInfo();

    extern wxClassInfo * sipVH__core_6(sip_gilstate_t,PyObject *);

    return sipVH__core_6(sipGILState,sipMeth);
}


PyDoc_STRVAR(doc_wxQueryNewPaletteEvent_SetPaletteRealized, "QueryNewPaletteEvent.SetPaletteRealized(bool)");

extern "C" {static PyObject *meth_wxQueryNewPaletteEvent_SetPaletteRealized(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxQueryNewPaletteEvent_SetPaletteRealized(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool realized;
        wxQueryNewPaletteEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_realized,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxQueryNewPaletteEvent, &sipCpp, &realized))
        {
            try
            {
            sipCpp->SetPaletteRealized(realized);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QueryNewPaletteEvent, sipName_SetPaletteRealized, doc_wxQueryNewPaletteEvent_SetPaletteRealized);

    return NULL;
}


PyDoc_STRVAR(doc_wxQueryNewPaletteEvent_GetPaletteRealized, "QueryNewPaletteEvent.GetPaletteRealized() -> bool");

extern "C" {static PyObject *meth_wxQueryNewPaletteEvent_GetPaletteRealized(PyObject *, PyObject *);}
static PyObject *meth_wxQueryNewPaletteEvent_GetPaletteRealized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        wxQueryNewPaletteEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxQueryNewPaletteEvent, &sipCpp))
        {
            bool sipRes;

            try
            {
            sipRes = sipCpp->GetPaletteRealized();
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QueryNewPaletteEvent, sipName_GetPaletteRealized, doc_wxQueryNewPaletteEvent_GetPaletteRealized);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_wxQueryNewPaletteEvent(void *, const sipTypeDef *);}
static void *cast_wxQueryNewPaletteEvent(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_wxQueryNewPaletteEvent)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_wxEvent)->ctd_cast((wxEvent *)(wxQueryNewPaletteEvent *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxQueryNewPaletteEvent(void *, int);}
static void release_wxQueryNewPaletteEvent(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxQueryNewPaletteEvent *>(sipCppV);
    else
        delete reinterpret_cast<wxQueryNewPaletteEvent *>(sipCppV);
}


extern "C" {static void dealloc_wxQueryNewPaletteEvent(sipSimpleWrapper *);}
static void dealloc_wxQueryNewPaletteEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipwxQueryNewPaletteEvent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_wxQueryNewPaletteEvent(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_wxQueryNewPaletteEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_wxQueryNewPaletteEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxQueryNewPaletteEvent *sipCpp = 0;

    {
        wxWindowID winid = 0;

        static const char *sipKwdList[] = {
            sipName_winid,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|i", &winid))
        {
            try
            {
            sipCpp = new sipwxQueryNewPaletteEvent(winid);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const wxQueryNewPaletteEvent * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxQueryNewPaletteEvent, &a0))
        {
            try
            {
            sipCpp = new sipwxQueryNewPaletteEvent(*a0);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxQueryNewPaletteEvent[] = {{19, 255, 1}};


static PyMethodDef methods_wxQueryNewPaletteEvent[] = {
    {SIP_MLNAME_CAST(sipName_GetPaletteRealized), meth_wxQueryNewPaletteEvent_GetPaletteRealized, METH_VARARGS, SIP_MLDOC_CAST(doc_wxQueryNewPaletteEvent_GetPaletteRealized)},
    {SIP_MLNAME_CAST(sipName_SetPaletteRealized), (PyCFunction)meth_wxQueryNewPaletteEvent_SetPaletteRealized, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxQueryNewPaletteEvent_SetPaletteRealized)}
};

sipVariableDef variables_wxQueryNewPaletteEvent[] = {
    {PropertyVariable, sipName_PaletteRealized, &methods_wxQueryNewPaletteEvent[0], &methods_wxQueryNewPaletteEvent[1], NULL, NULL},
};

PyDoc_STRVAR(doc_wxQueryNewPaletteEvent, "\1QueryNewPaletteEvent(int winid=0)\n"
    "QueryNewPaletteEvent(QueryNewPaletteEvent)");


sipClassTypeDef sipTypeDef__core_wxQueryNewPaletteEvent = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_wxQueryNewPaletteEvent,
        {0}
    },
    {
        sipNameNr_QueryNewPaletteEvent,
        {0, 0, 1},
        2, methods_wxQueryNewPaletteEvent,
        0, 0,
        1, variables_wxQueryNewPaletteEvent,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxQueryNewPaletteEvent,
    -1,
    -1,
    supers_wxQueryNewPaletteEvent,
    0,
    init_wxQueryNewPaletteEvent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxQueryNewPaletteEvent,
    0,
    0,
    0,
    release_wxQueryNewPaletteEvent,
    cast_wxQueryNewPaletteEvent,
    0,
    0,
    0
};
