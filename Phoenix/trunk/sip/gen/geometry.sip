//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
// 
// Copyright: (c) 2010 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/wx.h>
%End



//---------------------------------------------------------------------------

class wxPoint2DDouble   /PyName=Point2D/
{
    %TypeHeaderCode
        #include <wx/geometry.h>
    %End


public:
    wxPoint2DDouble();

    wxPoint2DDouble(
        wxDouble x,
        wxDouble y
    );

    wxPoint2DDouble(
        const wxPoint2DDouble & pt
    );

    wxPoint2DDouble(
        const wxPoint & pt
    );

    wxDouble m_x   /PyName=x/;

    wxDouble m_y   /PyName=y/;

    void GetFloor(
        wxInt32 * x   /Out/,
        wxInt32 * y   /Out/
    );

    void GetRounded(
        wxInt32 * x   /Out/,
        wxInt32 * y   /Out/
    );

    wxDouble GetVectorLength();

    wxDouble GetVectorAngle();

    void SetVectorLength(
        wxDouble length
    );

    void SetVectorAngle(
        wxDouble degrees
    );

    void Normalize();

    wxDouble GetDistance(
        const wxPoint2DDouble & pt
    );

    wxDouble GetDistanceSquare(
        const wxPoint2DDouble & pt
    );

    wxDouble GetDotProduct(
        const wxPoint2DDouble & vec
    );

    wxDouble GetCrossProduct(
        const wxPoint2DDouble & vec
    );

    wxPoint2DDouble operator-();

    wxPoint2DDouble & operator+=(
        const wxPoint2DDouble & pt
    );

    wxPoint2DDouble & operator-=(
        const wxPoint2DDouble & pt
    );

    wxPoint2DDouble & operator*=(
        const wxPoint2DDouble & pt
    );

    wxPoint2DDouble & operator/=(
        const wxPoint2DDouble & pt
    );

    bool operator==(
        const wxPoint2DDouble & pt
    );

    bool operator!=(
        const wxPoint2DDouble & pt
    );

    SIP_PYOBJECT Get();
    %MethodCode
        sipRes = sipBuildResult(&sipIsErr, "(dd)", sipCpp->m_x, sipCpp->m_y);
    %End

    %ConvertToTypeCode
        // is it just a typecheck?
        if (!sipIsErr) {
            if (sipCanConvertToType(sipPy, sipType_wxPoint2DDouble, SIP_NO_CONVERTORS))
                return 1;
        
            if (PySequence_Check(sipPy) && PySequence_Size(sipPy) == 2) {
                int rval = 1;
                PyObject* o1 = PySequence_ITEM(sipPy, 0);
                PyObject* o2 = PySequence_ITEM(sipPy, 1);
                if (!PyNumber_Check(o1) || !PyNumber_Check(o2)) 
                    rval = 0;
                Py_DECREF(o1);
                Py_DECREF(o2);
                return rval;
            }
            return 0;
        }   
        
        // otherwise do the conversion
        if (PySequence_Check(sipPy)) {
            PyObject* o1 = PySequence_ITEM(sipPy, 0);
            PyObject* o2 = PySequence_ITEM(sipPy, 1);
            *sipCppPtr = new wxPoint2DDouble(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2));
            Py_DECREF(o1);
            Py_DECREF(o2);
            return sipGetState(sipTransferObj);
         }    
         *sipCppPtr = reinterpret_cast<wxPoint2DDouble*>(sipConvertToType(
                     sipPy, sipType_wxPoint2DDouble, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));
         return sipGetState(sipTransferObj);
    %End
};  // end of class wxPoint2DDouble


%Extract pycode
def _Point2D___str__(self):
    return str(self.Get())
Point2D.__str__ = _Point2D___str__
del _Point2D___str__

%End

%Extract pycode
def _Point2D___repr__(self):
    return "wx.Point2D"+str(self.Get())
Point2D.__repr__ = _Point2D___repr__
del _Point2D___repr__

%End

%Extract pycode
def _Point2D___len__(self):
    return len(self.Get())
Point2D.__len__ = _Point2D___len__
del _Point2D___len__

%End

%Extract pycode
def _Point2D___nonzero__(self):
    return self.Get() != (0,0)
Point2D.__nonzero__ = _Point2D___nonzero__
del _Point2D___nonzero__

%End

%Extract pycode
def _Point2D___reduce__(self):
    return (Point2D, self.Get())
Point2D.__reduce__ = _Point2D___reduce__
del _Point2D___reduce__

%End

%Extract pycode
def _Point2D___getitem__(self, idx):
    return self.Get()[idx]
Point2D.__getitem__ = _Point2D___getitem__
del _Point2D___getitem__

%End

%Extract pycode
def _Point2D___setitem__(self, idx, val):
    if idx == 0: self.x = val
    elif idx == 1: self.y = val
    else: raise IndexError
Point2D.__setitem__ = _Point2D___setitem__
del _Point2D___setitem__

%End

%Extract pycode
Point2D.__safe_for_unpickling__ = True

%End

class wxRect2DDouble   /PyName=Rect2D/
{
    %TypeHeaderCode
        #include <wx/geometry.h>
    %End


public:
    wxRect2DDouble();

    wxRect2DDouble(
        wxDouble x,
        wxDouble y,
        wxDouble w,
        wxDouble h
    );

    wxDouble m_x   /PyName=x/;

    wxDouble m_y   /PyName=y/;

    wxDouble m_width   /PyName=width/;

    wxDouble m_height   /PyName=height/;

    wxPoint2DDouble GetPosition();

    wxSize GetSize();

    wxDouble GetLeft();

    void SetLeft(
        wxDouble n
    );

    void MoveLeftTo(
        wxDouble n
    );

    wxDouble GetTop();

    void SetTop(
        wxDouble n
    );

    void MoveTopTo(
        wxDouble n
    );

    wxDouble GetBottom();

    void SetBottom(
        wxDouble n
    );

    void MoveBottomTo(
        wxDouble n
    );

    wxDouble GetRight();

    void SetRight(
        wxDouble n
    );

    void MoveRightTo(
        wxDouble n
    );

    wxPoint2DDouble GetLeftTop();

    void SetLeftTop(
        const wxPoint2DDouble & pt
    );

    void MoveLeftTopTo(
        const wxPoint2DDouble & pt
    );

    wxPoint2DDouble GetLeftBottom();

    void SetLeftBottom(
        const wxPoint2DDouble & pt
    );

    void MoveLeftBottomTo(
        const wxPoint2DDouble & pt
    );

    wxPoint2DDouble GetRightTop();

    void SetRightTop(
        const wxPoint2DDouble & pt
    );

    void MoveRightTopTo(
        const wxPoint2DDouble & pt
    );

    wxPoint2DDouble GetRightBottom();

    void SetRightBottom(
        const wxPoint2DDouble & pt
    );

    void MoveRightBottomTo(
        const wxPoint2DDouble & pt
    );

    wxPoint2DDouble GetCentre();

    void SetCentre(
        const wxPoint2DDouble & pt
    );

    void MoveCentreTo(
        const wxPoint2DDouble & pt
    );

    wxOutCode GetOutCode(
        const wxPoint2DDouble & pt
    );

    wxOutCode GetOutcode(
        const wxPoint2DDouble & pt
    );

    bool Contains(
        const wxPoint2DDouble & pt
    );

    bool Contains(
        const wxRect2DDouble & rect
    );

    bool IsEmpty();

    bool HaveEqualSize(
        const wxRect2DDouble & rect
    );

    void Inset(
        wxDouble x,
        wxDouble y
    );

    void Inset(
        wxDouble left,
        wxDouble top,
        wxDouble right,
        wxDouble bottom
    );

    void Offset(
        const wxPoint2DDouble & pt
    );

    void ConstrainTo(
        const wxRect2DDouble & rect
    );

    wxPoint2DDouble Interpolate(
        wxInt32 widthfactor,
        wxInt32 heightfactor
    );

    void Intersect(
        const wxRect2DDouble & otherRect
    );

    static
    void Intersect(
        const wxRect2DDouble & src1,
        const wxRect2DDouble & src2,
        wxRect2DDouble * dest
    );

    wxRect2DDouble CreateIntersection(
        const wxRect2DDouble & otherRect
    );

    bool Intersects(
        const wxRect2DDouble & rect
    );

    void Union(
        const wxRect2DDouble & otherRect
    );

    void Union(
        const wxPoint2DDouble & pt
    );

    static
    void Union(
        const wxRect2DDouble & src1,
        const wxRect2DDouble & src2,
        wxRect2DDouble * dest
    );

    wxRect2DDouble CreateUnion(
        const wxRect2DDouble & otherRect
    );

    void Scale(
        wxDouble f
    );

    void Scale(
        wxInt32 num,
        wxInt32 denum
    );

    bool operator==(
        const wxRect2DDouble & rect
    );

    bool operator!=(
        const wxRect2DDouble & rect
    );

    SIP_PYOBJECT Get();
    %MethodCode
        sipRes = sipBuildResult(&sipIsErr, "(dddd)", 
                                sipCpp->m_x, sipCpp->m_y, sipCpp->m_width, sipCpp->m_height);
    %End

    %ConvertToTypeCode
        // is it just a typecheck?
        if (!sipIsErr) {
            if (sipCanConvertToType(sipPy, sipType_wxRect2DDouble, SIP_NO_CONVERTORS))
                return 1;
        
            if (PySequence_Check(sipPy) && PySequence_Size(sipPy) == 4) {
                int rval = 1;
                PyObject* o1 = PySequence_ITEM(sipPy, 0);
                PyObject* o2 = PySequence_ITEM(sipPy, 1);
                PyObject* o3 = PySequence_ITEM(sipPy, 2);
                PyObject* o4 = PySequence_ITEM(sipPy, 3);
                if (!PyNumber_Check(o1) || !PyNumber_Check(o2) || !PyNumber_Check(o3) || !PyNumber_Check(o4)) 
                    rval = 0;
                Py_DECREF(o1);
                Py_DECREF(o2);
                Py_DECREF(o3);
                Py_DECREF(o4);
                return rval;
            }
            return 0;
        }   
        
        // otherwise do the conversion
        if (PySequence_Check(sipPy)) {
            PyObject* o1 = PySequence_ITEM(sipPy, 0);
            PyObject* o2 = PySequence_ITEM(sipPy, 1);
            PyObject* o3 = PySequence_ITEM(sipPy, 2);
            PyObject* o4 = PySequence_ITEM(sipPy, 3);       
            *sipCppPtr = new wxRect2DDouble(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2),
                                     PyFloat_AsDouble(o3), PyFloat_AsDouble(o4));
            Py_DECREF(o1);
            Py_DECREF(o2);
            return sipGetState(sipTransferObj);
         }    
         *sipCppPtr = reinterpret_cast<wxRect2DDouble*>(sipConvertToType(
                     sipPy, sipType_wxRect2DDouble, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));
         return sipGetState(sipTransferObj);
    %End
};  // end of class wxRect2DDouble


%Extract pycode
def _Rect2D___str__(self):
    return str(self.Get())
Rect2D.__str__ = _Rect2D___str__
del _Rect2D___str__

%End

%Extract pycode
def _Rect2D___repr__(self):
    return "wx.Rect2D"+str(self.Get())
Rect2D.__repr__ = _Rect2D___repr__
del _Rect2D___repr__

%End

%Extract pycode
def _Rect2D___len__(self):
    return len(self.Get())
Rect2D.__len__ = _Rect2D___len__
del _Rect2D___len__

%End

%Extract pycode
def _Rect2D___nonzero__(self):
    return self.Get() != (0,0,0,0)
Rect2D.__nonzero__ = _Rect2D___nonzero__
del _Rect2D___nonzero__

%End

%Extract pycode
def _Rect2D___reduce__(self):
    return (Rect2D, self.Get())
Rect2D.__reduce__ = _Rect2D___reduce__
del _Rect2D___reduce__

%End

%Extract pycode
def _Rect2D___getitem__(self, idx):
    return self.Get()[idx]
Rect2D.__getitem__ = _Rect2D___getitem__
del _Rect2D___getitem__

%End

%Extract pycode
def _Rect2D___setitem__(self, idx, val):
    if idx == 0: self.x = val
    elif idx == 1: self.y = val
    elif idx == 2: self.width = val
    elif idx == 3: self.height = val
    else: raise IndexError
Rect2D.__setitem__ = _Rect2D___setitem__
del _Rect2D___setitem__

%End

%Extract pycode
Rect2D.__safe_for_unpickling__ = True

%End

enum wxOutCode
{
    wxInside,
    wxOutLeft,
    wxOutRight,
    wxOutTop,
    wxOutBottom
};

wxPoint2DDouble operator+(
    const wxPoint2DDouble & pt1,
    const wxPoint2DDouble & pt2
);

wxPoint2DDouble operator-(
    const wxPoint2DDouble & pt1,
    const wxPoint2DDouble & pt2
);

wxPoint2DDouble operator*(
    const wxPoint2DDouble & pt1,
    const wxPoint2DDouble & pt2
);

wxPoint2DDouble operator*(
    wxDouble n,
    const wxPoint2DDouble & pt
);

wxPoint2DDouble operator*(
    const wxPoint2DDouble & pt,
    wxDouble n
);

wxPoint2DDouble operator/(
    const wxPoint2DDouble & pt1,
    const wxPoint2DDouble & pt2
);

wxPoint2DDouble operator/(
    const wxPoint2DDouble & pt,
    wxDouble n
);


//---------------------------------------------------------------------------

