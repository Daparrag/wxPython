//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
// 
// Copyright: (c) 2010 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxFont : wxGDIObject
{
    %TypeHeaderCode
        #include <wx/font.h>
    %End


public:
    wxFont();

    wxFont(
        const wxFont & font
    );

    wxFont(
        int pointSize,
        wxFontFamily family,
        wxFontStyle style,
        wxFontWeight weight,
        bool underline = false,
        const wxString & faceName = wxEmptyString,
        wxFontEncoding encoding = wxFONTENCODING_DEFAULT
    );

    wxFont(
        const wxSize & pixelSize,
        wxFontFamily family,
        wxFontStyle style,
        wxFontWeight weight,
        bool underline = false,
        const wxString & faceName = wxEmptyString,
        wxFontEncoding encoding = wxFONTENCODING_DEFAULT
    );

    wxFont(
        const wxString & fontdesc
    );

    ~wxFont();

    wxFont(
        int pointSize,
        wxFontFamily family,
        int flags = wxFONTFLAG_DEFAULT,
        const wxString& faceName = wxEmptyString,
        wxFontEncoding encoding = wxFONTENCODING_DEFAULT )   /NoDerived/;
    %MethodCode
        wxFont* font = wxFont::New(pointSize, family, flags, *faceName, encoding);
        sipCpp = new sipwxFont(*font);
        delete font;
    %End

    wxFontEncoding GetEncoding();

    wxString GetFaceName();

    wxFontFamily GetFamily();

    wxString GetNativeFontInfoDesc();

    wxString GetNativeFontInfoUserDesc();

    int GetPointSize();

    wxSize GetPixelSize();

    wxFontStyle GetStyle();

    bool GetUnderlined();

    wxFontWeight GetWeight();

    bool IsFixedWidth();

    bool IsOk();

    wxFont Bold();

    wxFont Italic();

    wxFont Larger();

    wxFont Smaller();

    wxFont & MakeBold();

    wxFont & MakeItalic();

    wxFont & MakeLarger();

    wxFont & MakeSmaller();

    wxFont & Scale(
        float x
    );

    wxFont Scaled(
        float x
    );

    void SetEncoding(
        wxFontEncoding encoding
    );

    bool SetFaceName(
        const wxString & faceName
    );

    void SetFamily(
        wxFontFamily family
    );

    bool SetNativeFontInfo(
        const wxString & info
    );

    bool SetNativeFontInfoUserDesc(
        const wxString & info
    );

    void SetPointSize(
        int pointSize
    );

    void SetPixelSize(
        const wxSize & pixelSize
    );

    void SetStyle(
        wxFontStyle style
    );

    void SetUnderlined(
        bool underlined
    );

    void SetWeight(
        wxFontWeight weight
    );

    static
    wxFont * New(
        int pointSize,
        wxFontFamily family,
        wxFontStyle style,
        wxFontWeight weight,
        bool underline = false,
        const wxString & faceName = wxEmptyString,
        wxFontEncoding encoding = wxFONTENCODING_DEFAULT
    )   /Factory/;

    static
    wxFont * New(
        int pointSize,
        wxFontFamily family,
        int flags = wxFONTFLAG_DEFAULT,
        const wxString & faceName = wxEmptyString,
        wxFontEncoding encoding = wxFONTENCODING_DEFAULT
    )   /Factory/;

    static
    wxFont * New(
        const wxSize & pixelSize,
        wxFontFamily family,
        wxFontStyle style,
        wxFontWeight weight,
        bool underline = false,
        const wxString & faceName = wxEmptyString,
        wxFontEncoding encoding = wxFONTENCODING_DEFAULT
    )   /Factory/;

    static
    wxFont * New(
        const wxSize & pixelSize,
        wxFontFamily family,
        int flags = wxFONTFLAG_DEFAULT,
        const wxString & faceName = wxEmptyString,
        wxFontEncoding encoding = wxFONTENCODING_DEFAULT
    )   /Factory/;

    bool operator!=(
        const wxFont & font
    );

    bool operator==(
        const wxFont & font
    );

    static
    wxFontEncoding GetDefaultEncoding();

    static
    void SetDefaultEncoding(
        wxFontEncoding encoding
    );

    %Property(name=Encoding, get=GetEncoding, set=SetEncoding)
    %Property(name=FaceName, get=GetFaceName, set=SetFaceName)
    %Property(name=Family, get=GetFamily, set=SetFamily)
    %Property(name=NativeFontInfoDesc, get=GetNativeFontInfoDesc, set=SetNativeFontInfo)
    %Property(name=NativeFontInfoUserDesc, get=GetNativeFontInfoUserDesc, set=SetNativeFontInfoUserDesc)
    %Property(name=PointSize, get=GetPointSize, set=SetPointSize)
    %Property(name=PixelSize, get=GetPixelSize, set=SetPixelSize)
    %Property(name=Style, get=GetStyle, set=SetStyle)
    %Property(name=Underlined, get=GetUnderlined, set=SetUnderlined)
    %Property(name=Weight, get=GetWeight, set=SetWeight)
};  // end of class wxFont


enum wxFontFamily
{
    wxFONTFAMILY_DEFAULT,
    wxFONTFAMILY_DECORATIVE,
    wxFONTFAMILY_ROMAN,
    wxFONTFAMILY_SCRIPT,
    wxFONTFAMILY_SWISS,
    wxFONTFAMILY_MODERN,
    wxFONTFAMILY_TELETYPE,
    wxFONTFAMILY_UNKNOWN
};

enum wxFontStyle
{
    wxFONTSTYLE_NORMAL,
    wxFONTSTYLE_ITALIC,
    wxFONTSTYLE_SLANT,
    wxFONTSTYLE_MAX
};

enum wxFontWeight
{
    wxFONTWEIGHT_NORMAL,
    wxFONTWEIGHT_LIGHT,
    wxFONTWEIGHT_BOLD,
    wxFONTWEIGHT_MAX
};

enum wxFontFlag
{
    wxFONTFLAG_DEFAULT,
    wxFONTFLAG_ITALIC,
    wxFONTFLAG_SLANT,
    wxFONTFLAG_LIGHT,
    wxFONTFLAG_BOLD,
    wxFONTFLAG_ANTIALIASED,
    wxFONTFLAG_NOT_ANTIALIASED,
    wxFONTFLAG_UNDERLINED,
    wxFONTFLAG_STRIKETHROUGH,
    wxFONTFLAG_MASK
};

enum wxFontEncoding
{
    wxFONTENCODING_SYSTEM,
    wxFONTENCODING_DEFAULT,
    wxFONTENCODING_ISO8859_1,
    wxFONTENCODING_ISO8859_2,
    wxFONTENCODING_ISO8859_3,
    wxFONTENCODING_ISO8859_4,
    wxFONTENCODING_ISO8859_5,
    wxFONTENCODING_ISO8859_6,
    wxFONTENCODING_ISO8859_7,
    wxFONTENCODING_ISO8859_8,
    wxFONTENCODING_ISO8859_9,
    wxFONTENCODING_ISO8859_10,
    wxFONTENCODING_ISO8859_11,
    wxFONTENCODING_ISO8859_12,
    wxFONTENCODING_ISO8859_13,
    wxFONTENCODING_ISO8859_14,
    wxFONTENCODING_ISO8859_15,
    wxFONTENCODING_ISO8859_MAX,
    wxFONTENCODING_KOI8,
    wxFONTENCODING_KOI8_U,
    wxFONTENCODING_ALTERNATIVE,
    wxFONTENCODING_BULGARIAN,
    wxFONTENCODING_CP437,
    wxFONTENCODING_CP850,
    wxFONTENCODING_CP852,
    wxFONTENCODING_CP855,
    wxFONTENCODING_CP866,
    wxFONTENCODING_CP874,
    wxFONTENCODING_CP932,
    wxFONTENCODING_CP936,
    wxFONTENCODING_CP949,
    wxFONTENCODING_CP950,
    wxFONTENCODING_CP1250,
    wxFONTENCODING_CP1251,
    wxFONTENCODING_CP1252,
    wxFONTENCODING_CP1253,
    wxFONTENCODING_CP1254,
    wxFONTENCODING_CP1255,
    wxFONTENCODING_CP1256,
    wxFONTENCODING_CP1257,
    wxFONTENCODING_CP12_MAX,
    wxFONTENCODING_UTF7,
    wxFONTENCODING_UTF8,
    wxFONTENCODING_EUC_JP,
    wxFONTENCODING_UTF16BE,
    wxFONTENCODING_UTF16LE,
    wxFONTENCODING_UTF32BE,
    wxFONTENCODING_UTF32LE,
    wxFONTENCODING_MACROMAN,
    wxFONTENCODING_MACJAPANESE,
    wxFONTENCODING_MACCHINESETRAD,
    wxFONTENCODING_MACKOREAN,
    wxFONTENCODING_MACARABIC,
    wxFONTENCODING_MACHEBREW,
    wxFONTENCODING_MACGREEK,
    wxFONTENCODING_MACCYRILLIC,
    wxFONTENCODING_MACDEVANAGARI,
    wxFONTENCODING_MACGURMUKHI,
    wxFONTENCODING_MACGUJARATI,
    wxFONTENCODING_MACORIYA,
    wxFONTENCODING_MACBENGALI,
    wxFONTENCODING_MACTAMIL,
    wxFONTENCODING_MACTELUGU,
    wxFONTENCODING_MACKANNADA,
    wxFONTENCODING_MACMALAJALAM,
    wxFONTENCODING_MACSINHALESE,
    wxFONTENCODING_MACBURMESE,
    wxFONTENCODING_MACKHMER,
    wxFONTENCODING_MACTHAI,
    wxFONTENCODING_MACLAOTIAN,
    wxFONTENCODING_MACGEORGIAN,
    wxFONTENCODING_MACARMENIAN,
    wxFONTENCODING_MACCHINESESIMP,
    wxFONTENCODING_MACTIBETAN,
    wxFONTENCODING_MACMONGOLIAN,
    wxFONTENCODING_MACETHIOPIC,
    wxFONTENCODING_MACCENTRALEUR,
    wxFONTENCODING_MACVIATNAMESE,
    wxFONTENCODING_MACARABICEXT,
    wxFONTENCODING_MACSYMBOL,
    wxFONTENCODING_MACDINGBATS,
    wxFONTENCODING_MACTURKISH,
    wxFONTENCODING_MACCROATIAN,
    wxFONTENCODING_MACICELANDIC,
    wxFONTENCODING_MACROMANIAN,
    wxFONTENCODING_MACCELTIC,
    wxFONTENCODING_MACGAELIC,
    wxFONTENCODING_MACKEYBOARD,
    wxFONTENCODING_ISO2022_JP,
    wxFONTENCODING_MAX,
    wxFONTENCODING_MACMIN,
    wxFONTENCODING_MACMAX,
    wxFONTENCODING_UTF16,
    wxFONTENCODING_UTF32,
    wxFONTENCODING_UNICODE,
    wxFONTENCODING_GB2312,
    wxFONTENCODING_BIG5,
    wxFONTENCODING_SHIFT_JIS,
    wxFONTENCODING_EUC_KR
};

wxFont wxNullFont;

%ModuleCode
wxFont* _FFont_function(int& _isErr, int pointSize, wxFontFamily family, int flags, const wxString* faceName, wxFontEncoding encoding)
{
    wxFont* font = wxFont::New(pointSize, family, flags, *faceName, encoding);
    return font;
}
%End
wxFont* FFont(
        int pointSize,
        wxFontFamily family,
        int flags = wxFONTFLAG_DEFAULT,
        const wxString& faceName = wxEmptyString,
        wxFontEncoding encoding = wxFONTENCODING_DEFAULT )   /Factory/;
%MethodCode
    sipRes = _FFont_function(sipIsErr, pointSize, family, flags, faceName, encoding);
%End


//---------------------------------------------------------------------------

