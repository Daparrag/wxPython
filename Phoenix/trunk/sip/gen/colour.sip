//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
// 
// Copyright: (c) 2010 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------
%ModuleCode
    #ifdef __WXMAC__
    #include <wx/osx/private.h>
    #endif
    
    #undef wxTransparentColour
    wxColour wxTransparentColour(0, 0, 0, wxALPHA_TRANSPARENT);
    
    wxColour testColourTypeMap(const wxColour& c)
    {
        return c;
    }
    extern void wxInitializeStockLists();
    
%End

//---------------------------------------------------------------------------

class wxColour : wxObject   /AllowNone/
{
    %TypeHeaderCode
        #include <wx/colour.h>
    %End


public:
    wxColour();

    wxColour(
        unsigned char red   /PyInt/,
        unsigned char green   /PyInt/,
        unsigned char blue   /PyInt/,
        unsigned char alpha   /PyInt/ = wxALPHA_OPAQUE
    );

    wxColour(
        unsigned long colRGB
    );

    wxColour(
        const wxColour & colour
    );

    void SetRGB(
        wxUint32 colRGB
    );

    void SetRGBA(
        wxUint32 colRGBA
    );

    wxUint32 GetRGB();

    wxUint32 GetRGBA();

    void Set(
        unsigned char red   /PyInt/,
        unsigned char green   /PyInt/,
        unsigned char blue   /PyInt/,
        unsigned char alpha   /PyInt/ = wxALPHA_OPAQUE
    );

    void Set(
        unsigned long RGB
    );

    bool Set(
        const wxString & str
    );

    unsigned char Alpha()   /PyInt/;

    unsigned char Blue()   /PyInt/;

    wxString GetAsString(
        long flags = wxC2S_NAME|wxC2S_CSS_SYNTAX
    );

    unsigned char Green()   /PyInt/;

    bool IsOk();

    unsigned char Red()   /PyInt/;

    bool operator!=(
        const wxColour & colour
    );

    bool operator==(
        const wxColour & colour
    );

    wxColour ChangeLightness(
        int ialpha
    );

    static
    void ChangeLightness(
        unsigned char * r   /In, Out/,
        unsigned char * g   /In, Out/,
        unsigned char * b   /In, Out/,
        int ialpha
    );

    static
    void MakeMono(
        unsigned char * r   /Out/,
        unsigned char * g   /Out/,
        unsigned char * b   /Out/,
        bool on
    );

    static
    void MakeDisabled(
        unsigned char * r   /In, Out/,
        unsigned char * g   /In, Out/,
        unsigned char * b   /In, Out/,
        unsigned char brightness   /PyInt/ = 255
    );

    static
    void MakeGrey(
        unsigned char * r   /In, Out/,
        unsigned char * g   /In, Out/,
        unsigned char * b   /In, Out/
    );

    static
    void MakeGrey(
        unsigned char * r   /In, Out/,
        unsigned char * g   /In, Out/,
        unsigned char * b   /In, Out/,
        double weight_r,
        double weight_g,
        double weight_b
    );

    static
    unsigned char AlphaBlend(
        unsigned char fg   /PyInt/,
        unsigned char bg   /PyInt/,
        double alpha
    )   /PyInt/;

    %Property(name=Pixel, get=GetPixel)
    %Property(name=RGB, get=GetRGB, set=SetRGB)
    %Property(name=RGBA, get=GetRGBA, set=SetRGBA)
    %Property(name=red, get=Red)
    %Property(name=green, get=Green)
    %Property(name=blue, get=Blue)
    %Property(name=alpha, get=Alpha)
    %TypeCode
    wxIntPtr _wxColour_GetPixel(wxColour* self, int& _isErr)
    {
        return (wxIntPtr)self->GetPixel();
    }
    %End
    wxIntPtr GetPixel();
    %MethodCode
        sipRes = _wxColour_GetPixel(sipCpp, sipIsErr);
    %End

    %TypeCode
    PyObject* _wxColour_Get(wxColour* self, int& _isErr, bool includeAlpha)
    {
        int red = -1;
        int green = -1;
        int blue = -1;
        int alpha = wxALPHA_OPAQUE;
        if (self->IsOk()) {
            red =   self->Red();
            green = self->Green();
            blue =  self->Blue();
            alpha = self->Alpha();
        }
        if (includeAlpha)
            return sipBuildResult(&_isErr, "(iiii)", red, green, blue, alpha);
        else
            return sipBuildResult(&_isErr, "(iii)", red, green, blue);
    }
    %End
    PyObject* Get(bool includeAlpha=true);
    %MethodCode
        sipRes = _wxColour_Get(sipCpp, sipIsErr, includeAlpha);
    %End

    %ConvertToTypeCode
        // is it just a typecheck?
        if (!sipIsErr) {
            if (sipPy == Py_None)
                return 1;
            if (sipCanConvertToType(sipPy, sipType_wxColour, SIP_NO_CONVERTORS))
                return 1;
            if (PyString_Check(sipPy) || PyUnicode_Check(sipPy))
                return 1;           
            if (PySequence_Check(sipPy)) {
                size_t len = PySequence_Size(sipPy);
                if (len != 3 && len != 4) 
                    return 0;
                // ensure all the items in the sequence are numbers
                for (int idx=0; idx<len; idx+=1) {
                    PyObject* o = PySequence_ITEM(sipPy, idx);
                    bool isNum = PyNumber_Check(o);
                    Py_DECREF(o);
                    if (!isNum)
                        return 0;
                }
                return 1;
            }
            return 0;
        }
        // otherwise do the conversion
        // is it None?
        if (sipPy == Py_None) {
            *sipCppPtr = new wxColour(wxNullColour);
            return sipGetState(sipTransferObj);
        }
        // Is it a string?
        else if (PyString_Check(sipPy) || PyUnicode_Check(sipPy)) {
            wxString spec = Py2wxString(sipPy);
            if (spec.GetChar(0) == '#' 
                && (spec.length() == 7 || spec.length() == 9)) {  // It's  #RRGGBB[AA]
                long red, green, blue;
                red = green = blue = 0;
                spec.Mid(1,2).ToLong(&red,   16);
                spec.Mid(3,2).ToLong(&green, 16);
                spec.Mid(5,2).ToLong(&blue,  16);
        
                if (spec.length() == 7)         // no alpha
                    *sipCppPtr = new wxColour(red, green, blue);
                else {                          // yes alpha
                    long alpha;
                    spec.Mid(7,2).ToLong(&alpha, 16);
                    *sipCppPtr = new wxColour(red, green, blue, alpha);
                }
                return sipGetState(sipTransferObj);
            }
            else {                                       // assume it's a colour name
                // check if alpha is there too
                int pos;
                if (((pos = spec.Find(':', true)) != wxNOT_FOUND) && (pos == spec.length()-3)) {
                    long alpha;
                    spec.Right(2).ToLong(&alpha, 16);
                    wxColour c = wxColour(spec.Left(spec.length()-3));
                    *sipCppPtr = new wxColour(c.Red(), c.Green(), c.Blue(), alpha);
                }
                else
                    *sipCppPtr = new wxColour(spec);
                return sipGetState(sipTransferObj);
            }
        }
        // Is it a 3 or 4 element sequence?
        else if (PySequence_Check(sipPy)) {
            size_t len = PyObject_Length(sipPy);
            
            PyObject* o1 = PySequence_GetItem(sipPy, 0);
            PyObject* o2 = PySequence_GetItem(sipPy, 1);
            PyObject* o3 = PySequence_GetItem(sipPy, 2);
            if (len == 3) 
                *sipCppPtr = new wxColour(PyInt_AsLong(o1), PyInt_AsLong(o2), PyInt_AsLong(o3));
            else {
                PyObject* o4 = PySequence_GetItem(sipPy, 3);
                *sipCppPtr = new wxColour(PyInt_AsLong(o1), PyInt_AsLong(o2), PyInt_AsLong(o3),
                                          PyInt_AsLong(o4));
                Py_DECREF(o4);
            }
            Py_DECREF(o1);
            Py_DECREF(o2);
            Py_DECREF(o3);
            return sipGetState(sipTransferObj);
        }
        
        // if we get this far then it must already be a wxColour instance
        *sipCppPtr = reinterpret_cast<wxColour*>(sipConvertToType(
            sipPy, sipType_wxColour, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));
        return sipGetState(sipTransferObj);
    %End
};  // end of class wxColour


%Extract(id=pycode)
def _Colour___str__(self):
    return str(self.Get())
Colour.__str__ = _Colour___str__
del _Colour___str__

%End

%Extract(id=pycode)
def _Colour___repr__(self):
    return "wx.Colour"+str(self.Get())
Colour.__repr__ = _Colour___repr__
del _Colour___repr__

%End

%Extract(id=pycode)
def _Colour___len__(self):
    return len(self.Get())
Colour.__len__ = _Colour___len__
del _Colour___len__

%End

%Extract(id=pycode)
def _Colour___nonzero__(self):
    return self.IsOk()
Colour.__nonzero__ = _Colour___nonzero__
del _Colour___nonzero__

%End

%Extract(id=pycode)
def _Colour___reduce__(self):
    return (Colour, self.Get())
Colour.__reduce__ = _Colour___reduce__
del _Colour___reduce__

%End

%Extract(id=pycode)
def _Colour___getitem__(self, idx):
    return self.Get()[idx]
Colour.__getitem__ = _Colour___getitem__
del _Colour___getitem__

%End

%Extract(id=pycode)
def _Colour___setitem__(self, idx, val):
    if idx == 0:   self.red = val
    elif idx == 1: self.green = val
    elif idx == 2: self.blue = val
    elif idx == 3: self.alpha = val
    else: raise IndexError
Colour.__setitem__ = _Colour___setitem__
del _Colour___setitem__

%End

%Extract(id=pycode)
Rect.__safe_for_unpickling__ = True

%End

enum 
{
    wxC2S_NAME,
    wxC2S_CSS_SYNTAX,
    wxC2S_HTML_SYNTAX
};

wxColour wxNullColour;

wxColour wxTransparentColour;

const int wxALPHA_TRANSPARENT;

const int wxALPHA_OPAQUE;

%ModuleCode
wxColour* _MacThemeColour_function(int& _isErr, int themeBrushID)
{
    #ifdef __WXMAC__
        return new wxColour(wxMacCreateCGColorFromHITheme(themeBrushID));
    #else
        wxPyRaiseNotImplemented(); 
        _isErr = 1;
        return NULL; 
    #endif
}
%End
wxColour* MacThemeColour(int themeBrushID)   /Factory/;
%MethodCode
    sipRes = _MacThemeColour_function(sipIsErr, themeBrushID);
%End

    wxColour testColourTypeMap(const wxColour& c);
    void wxInitializeStockLists();



//---------------------------------------------------------------------------

