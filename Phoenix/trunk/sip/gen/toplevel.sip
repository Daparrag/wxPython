//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
// 
// Copyright: (c) 2010 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

class wxTopLevelWindow : wxWindow
{
    %TypeHeaderCode
        #include <wx/toplevel.h>
    %End


public:
    wxTopLevelWindow();

    wxTopLevelWindow(
        wxWindow * parent   /TranserThis/,
        wxWindowID id = wxID_ANY,
        const wxString & title = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDEFAULT_FRAME_STYLE,
        const wxString & name = wxFrameNameStr
    );

    ~wxTopLevelWindow();

    bool Create(
        wxWindow * parent   /TranserThis/,
        wxWindowID id = wxID_ANY,
        const wxString & title = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxDEFAULT_FRAME_STYLE,
        const wxString & name = wxFrameNameStr
    );

    bool CanSetTransparent();

    void CenterOnScreen(
        int direction
    );

    void CentreOnScreen(
        int direction = wxBOTH
    );

    bool EnableCloseButton(
        bool enable = true
    );

    wxWindow * GetDefaultItem();

    wxIcon GetIcon();

    const wxIconBundle & GetIcons();

    wxString GetTitle();

    void Iconize(
        bool iconize = true
    );

    bool IsActive();

    bool IsAlwaysMaximized();

    bool IsFullScreen();

    bool IsIconized();

    bool IsMaximized();

    bool Layout();

    void Maximize(
        bool maximize = true
    );

    void RequestUserAttention(
        int flags = wxUSER_ATTENTION_INFO
    );

    wxWindow * SetDefaultItem(
        wxWindow * win
    );

    wxWindow * SetTmpDefaultItem(
        wxWindow * win
    );

    wxWindow * GetTmpDefaultItem();

    void SetIcon(
        const wxIcon & icon
    );

    void SetIcons(
        const wxIconBundle & icons
    );

    void SetMaxSize(
        const wxSize & size
    );

    void SetMinSize(
        const wxSize & size
    );

    bool SetShape(
        const wxRegion & region
    );

    void SetSizeHints(
        int minW,
        int minH,
        int maxW = -1,
        int maxH = -1,
        int incW = -1,
        int incH = -1
    );

    void SetSizeHints(
        const wxSize & minSize,
        const wxSize & maxSize = wxDefaultSize,
        const wxSize & incSize = wxDefaultSize
    );

    void SetTitle(
        const wxString & title
    );

    bool SetTransparent(
        wxByte alpha
    );

    bool ShouldPreventAppExit();

    void OSXSetModified(
        bool modified
    );

    bool OSXIsModified();

    bool ShowFullScreen(
        bool show,
        long style = wxFULLSCREEN_ALL
    );

    static
    wxSize GetDefaultSize();

    %TypeCode
    void _wxTopLevelWindow_MacSetMetalAppearance(wxTopLevelWindow* self, int& _isErr, bool on)
    {
        int style = self->GetExtraStyle();
        if ( on )
            style |= wxFRAME_EX_METAL;
        else
            style &= ~wxFRAME_EX_METAL;
        self->SetExtraStyle(style);
    }
    %End
    void MacSetMetalAppearance(bool on);
    %MethodCode
        _wxTopLevelWindow_MacSetMetalAppearance(sipCpp, sipIsErr, on);
    %End

    %TypeCode
    bool _wxTopLevelWindow_MacGetMetalAppearance(wxTopLevelWindow* self, int& _isErr)
    {
        return self->GetExtraStyle() & wxFRAME_EX_METAL;
    }
    %End
    bool MacGetMetalAppearance();
    %MethodCode
        sipRes = _wxTopLevelWindow_MacGetMetalAppearance(sipCpp, sipIsErr);
    %End

    %TypeCode
    bool _wxTopLevelWindow_MacGetUnifiedAppearance(wxTopLevelWindow* self, int& _isErr)
    {
        return true;
    }
    %End
    bool MacGetUnifiedAppearance();
    %MethodCode
        sipRes = _wxTopLevelWindow_MacGetUnifiedAppearance(sipCpp, sipIsErr);
    %End

    %TypeCode
    void* _wxTopLevelWindow_MacGetTopLevelWindowRef(wxTopLevelWindow* self, int& _isErr)
    {
        #ifdef __WXMAC__
            return (void*)(self->MacGetTopLevelWindowRef());
        #else
            return 0;
        #endif
    }
    %End
    void* MacGetTopLevelWindowRef();
    %MethodCode
        sipRes = _wxTopLevelWindow_MacGetTopLevelWindowRef(sipCpp, sipIsErr);
    %End

    %Property(name=DefaultItem, get=GetDefaultItem, set=SetDefaultItem)
    %Property(name=Icon, get=GetIcon, set=SetIcon)
    %Property(name=Title, get=GetTitle, set=SetTitle)
    %Property(name=TmpDefaultItem, get=GetTmpDefaultItem, set=SetTmpDefaultItem)
    %Property(name=OSXModified, get=OSXIsModified, set=OSXSetModified)
    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual bool HasTransparentBackground();
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void OnEnabled(bool enabled);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;


};  // end of class wxTopLevelWindow


enum 
{
    wxUSER_ATTENTION_INFO,
    wxUSER_ATTENTION_ERROR
};

enum 
{
    wxFULLSCREEN_NOMENUBAR,
    wxFULLSCREEN_NOTOOLBAR,
    wxFULLSCREEN_NOSTATUSBAR,
    wxFULLSCREEN_NOBORDER,
    wxFULLSCREEN_NOCAPTION,
    wxFULLSCREEN_ALL
};


//---------------------------------------------------------------------------

